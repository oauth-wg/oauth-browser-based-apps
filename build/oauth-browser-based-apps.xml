<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-02" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="19"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the application.</t>

<t>For example, a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request, and MUST verify the returned state
in the authorization response matches the original state the app created.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains, paths, or query string components, this exact
match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

<t>The following individuals contributed ideas, feedback, and wording that shaped and
formed the final specification:</t>

<t>Annabelle Backman, Brock Allen, Christian Mainka, Daniel Fett, George Fletcher,
Hannes Tschofenig, Joseph Heenan, Justin Richer, Karl McGuinness, Tomek Stojecki,
Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

