<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-02" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="19"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the application.</t>

<t>For example, a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

</section>
<section anchor="architectural-considerations" title="Architectural Considerations">

<t>In some cases, it may make sense to avoid the use of a strictly browser-based OAuth
application entirely, instead using an architecture that can provide better security.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
<section anchor="javascript-app-with-a-backend-component" title="JavaScript App with a Backend Component">

<t>Implementations MAY consider moving the authorization code exchange and handling of
access and refresh tokens to a backend component in order to avoid the risks inherent
in handling access tokens from a purely browser based app. In this case, the backend
component can be a confidential client and can be secured accordingly.</t>

<t>Security of the connection between code running in the browser and this backend
component is assumed to utilize browser-level protection mechanisms. Details are out
of scope of this document.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request, and MUST verify the returned state
in the authorization response matches the original state the app created.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains, paths, or query string components, this exact
match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

<t>The following individuals contributed ideas, feedback, and wording that shaped and
formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, John Bradley, Joseph Heenan, Justin Richer,
Karl McGuinness, Tomek Stojecki, Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAJnNBlwAA6VcW5PbuJV+x69A9TyMnZIU28lMJk5t1bbb9rgnvvS623Hl
aQoioRbSFKklyNZoXP7v+51zABCUqI53dyoptyQSPDjX71zA+XyuOtdV9rn+
cN53a/1s8USvmla/aJudt+38hfG21OfbrVdlU9RmgyvL1qy6+da0trhz88bg
vvkyXL+k6+cG18+fPFOl6XD9sydPf5o/fTp/+lel3LZ9rru2992zJ0/+ikuw
igkPV3e75/qy7mxb227+kp6iCtM918tiq1TRlK6+fa57Pze+cE5t3XOlddcU
z/Xeevzpm7Zr7cqnz/vN8FERmU1Lt8zxf61djV/OF/pK9sHfyf7OTdvUo++b
Fg/+cNcZ/mQ3xlXPtaHL/jOwYVE0G/6xb91zve66rX/+xz/yJeMrsoe/XOjP
xnU2e/RLc+/K7Ft+8BX2rS9LW0NS+5yCkq7+T1PdmcrVdu6bqu9cU3t+lKqb
dmM6d29pzx9fXzx7+vSv4c8f//Ln9OdP6du//PinH8OfPz374Rn9eXF9xf+C
z6IlFw3kU3f62hbYabfXV03lCqFq4DC2GTb0zt1Z/dn6jr8NG3+3yL/iPf7c
NLeVnUH8xej+89Js9AvTQjuyBSC2/LsHV3hpav0PW7ru93wF8H70JS/xrvnd
VZXBJttt0xriJf8savzSFnaztC3p84/4/rXtivWIOfzNESuibHdr0+1ucyKy
bwZLwUcxKR9YPO+arSv86EmDsSZBvABH9UXftiSeq9YUnSvsSbncNK2HIPXb
piwt/VmOJHSzmPiFeQRbSroeF/ulWdfwGKas7D5f5ZfFwbe8wj/7pSuasZTr
srV7/dYse5i+PxD1wde8yGtT2GXT3B2K2tmKxNAdyDr76mgXwvr3zX2S7k/w
U/UqN583N+/ejgRAX/y/Ja3m87k2S9+RtJQahCqLut9ZBXVr/7uHcL1etc1G
k2/VbV/X5BXIJ7S22uMp2ujghDUcju5rs6ys6ho4TIvfLioX7La1nS6hM7i9
W1u9bZvCej/T3tWFpa/2em3ura4bvTN7OFh9Z+0WS3i+F464Xjn2RqZa6Ju1
89pvbeFWrhB6S9vBPXlePSqxxl0ed4lV0W+m0xuEAb0EkeYOquhqPMoURdOD
zt3a0kL3toLyg9JRfCEeVOFpINx4vbNVRf8uya1sg/J7jmTrZiebKuAImBzm
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
1xSFix57VfWrlfofJdmhgiFVAAA=

-->

</rfc>

