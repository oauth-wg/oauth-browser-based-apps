<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-oauth-browser-based-apps-06" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2020" month="April" day="05"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification details the security considerations and best practices that must be
taken into account when developing browser-based applications that use OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications executing in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices. <xref target="RFC8252"/> makes specific recommendations for how to securely implement OAuth in native
applications, including incorporating additional OAuth extensions where needed.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps and browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/> and <xref target="RFC6750"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that is dynamically downloaded and executed in a web browser,
usually written in JavaScript. Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>At the time that OAuth 2.0 <xref target="RFC6749"/> and <xref target="RFC6750"/> were created, browser-based JavaScript applications needed a solution that strictly complied with the same-origin policy. Common deployments of OAuth 2.0 involved an application running on a different domain than the authorization server, so it was historically not possible to use the authorization code flow which would require a cross-origin POST request. This was one of the motivations for the definition of the implicit flow, which returns the access token in the front channel via the fragment part of the URL, bypassing the need for a cross-origin POST request.</t>

<t>However, there are several drawbacks to the implicit flow, generally involving vulnerabilities associated with the exposure of the access token in the URL. See <xref target="implicit_flow"/> for an analysis of these attacks and the drawbacks of using the implicit flow in browsers. Additional attacks and security considerations can be found in <xref target="oauth-security-topics"/>.</t>

<t>In recent years, widespread adoption of Cross-Origin Resource Sharing (CORS), which enables exceptions to the same-origin policy, allows browser-based apps to use the OAuth 2.0 authorization code flow and make a POST request to exchange the authorization code for an access token at the token endpoint. In this flow, the access token is never exposed in the less secure front-channel. Furthermore, adding PKCE to the flow ensures that even if an authorization code is intercepted, it is unusable by an attacker.</t>

<t>For this reason, and from other lessons learned, the current best practice for browser-based applications is to use the OAuth 2.0 authorization code flow with PKCE.</t>

<t>Browser-based applications MUST:</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Protect themselves against CSRF attacks by ensuring the authorization server supports PKCE, or by using the OAuth 2.0 "state" parameter or the OpenID Connect "nonce" parameter to carry one-time use CSRF tokens</t>
  <t>Register one or more redirect URIs, and use only exact registered redirect URIs in authorization requests</t>
</list></t>

<t>OAuth 2.0 authorization servers MUST:</t>

<t><list style="symbols">
  <t>Require exact matching of registered redirect URIs</t>
  <t>Support the PKCE extension</t>
  <t>If issuing refresh tokens to browser-based apps, then:</t>
  <t>Rotate refresh tokens on each use</t>
  <t>Set a maximum lifetime on refresh tokens or expire if they are not used in some amount of time</t>
</list></t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth was initially created to allow third-party
applications to access an API on behalf of a user, it has proven to be
useful in a first-party scenario as well. First-party apps are applications where
the same organization provides both the API and the application.</t>

<t>Examples of first-party applications are a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use a redirect-based flow (such as the OAuth Authorization Code flow) 
as described later in this document.</t>

<t>The Resource Owner Password Grant MUST NOT be used, as described in 
<xref target="oauth-security-topics"/> section 3.4. Instead, by using the Authorization Code flow 
and redirecting the user to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and would instead be extended with custom code.</t>

</section>
<section anchor="application-architecture-patterns" title="Application Architecture Patterns">

<t>There are three primary architectural patterns available when building browser-based
applications.</t>

<t><list style="symbols">
  <t>a JavaScript application that has methods of sharing data with resource servers, such as using common-domain cookies</t>
  <t>a JavaScript application with a backend</t>
  <t>a JavaScript application with no backend, accessing resource servers directly</t>
</list></t>

<t>These three architectures have different use cases and considerations.</t>

<section anchor="browser-based-apps-that-can-share-data-with-the-resource-server" title="Browser-Based Apps that Can Share Data with the Resource Server">

<t>For simple system architectures, such as when the JavaScript application is served
from a domain that can share cookies with the domain of the API (resource server), 
OAuth adds additional attack vectors that could be avoided with a different solution.</t>

<t>In particular, using any redirect-based mechanism of obtaining an access token
enables the redirect-based attacks described in <xref target="oauth-security-topics"/>, but if 
the application, authorization server and resource server share a domain, then it is 
unnecessary to use a redirect mechanism to communicate between them.</t>

<t>An additional concern with handling access tokens in a browser is that as of the date of this publication, there is no
secure storage mechanism where JavaScript code can keep the access token to be later
used in an API request. Using an OAuth flow results in the JavaScript code getting an 
access token, needing to store it somewhere, and then retrieve it to make an API request.</t>

<t>Instead, a more secure design is to use an HTTP-only cookie between the JavaScript application 
and API so that the JavaScript code can't access the cookie value itself. Additionally, the SameSite
cookie attribute can be used to prevent CSRF attacks, or alternatively, the application
and API could be written to use anti-CSRF tokens.</t>

<t>OAuth was originally created for third-party or federated access to APIs, so it may not be
the best solution in a common-domain deployment. That said, using OAuth even in a common-domain
architecture does mean you can more easily rearchitect things later, such as if you were 
to later add a new domain to the system.</t>

</section>
<section anchor="javascript-applications-with-a-backend" title="JavaScript Applications with a Backend">

<figure><artwork><![CDATA[
+-------------+
|             |
|Authorization|
|   Server    |
|             |
+-------------+

   ^     +
   |(A)  |(B)
   |     |
   +     v

+-------------+             +--------------+
|             | +---------> |              |
| Application |   (C)       |   Resource   |
|   Server    |             |    Server    |
|             | <---------+ |              |
+-------------+   (D)       +--------------+

    ^    +
    |    |
    |    | browser
    |    | cookie
    |    |
    +    v

+-------------+
|             |
|   Browser   |
|             |
+-------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is loaded from a dynamic Application Server
that also has the ability to execute code itself. This enables the ability to keep
all of the steps involved in obtaining an access token outside of the JavaScript
application.</t>

<t>In this case, the Application Server performs the OAuth flow itself, and keeps the 
access token and refresh token stored internally, creating a separate session with
the browser-based app via a traditional browser cookie.</t>

<t>(Common examples of this architecture are an Angular front-end with a .NET backend, or
a React front-end with a Spring Boot backend.)</t>

<t>The Application Server SHOULD be considered a confidential client, and issued its own client
secret. The Application Server SHOULD use the OAuth 2.0 authorization code grant to initiate
a request for an access token. Upon handling the redirect from the Authorization
Server, the Application Server will request an access token using the authorization code
returned (A), which will be returned to the Application Server (B). The Application Server
stores this access token itself and establishes its own cookie-based session with the Browser application.
The Application Server can store the access token either server-side, or in the cookie itself.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it MUST instead make the request to the Application Server, and the Application Server will
make the request with the access token to the Resource Server (C), and forward the response (D)
back to the browser.</t>

<t>Security of the connection between code running in the browser and this Application Server is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found in the OWASP Cheat Sheet series (https://cheatsheetseries.owasp.org/),
such as setting an HTTP-only and Secure cookie to authenticate the session between the
browser and Application Server.</t>

<t>In this scenario, the session between the browser and Application Server MAY be either a
session cookie provided by the Application Server, OR the access token itself. Note that
if the access token is used as the session identifier, this exposes the access token
to the end user even if it is not available to the JavaScript application, so some
authorization servers may wish to limit the capabilities of these clients to mitigate risk.</t>

</section>
<section anchor="javascript-applications-without-a-backend" title="JavaScript Applications without a Backend">

<figure><artwork><![CDATA[
                      +---------------+           +--------------+
                      |               |           |              |
                      | Authorization |           |   Resource   |
                      |    Server     |           |    Server    |
                      |               |           |              |
                      +---------------+           +--------------+

                             ^     +                 ^     +
                             |     |                 |     |
                             |(B)  |(C)              |(D)  |(E)
                             |     |                 |     |
                             |     |                 |     |
                             +     v                 +     v

+-----------------+         +-------------------------------+
|                 |   (A)   |                               |
| Static Web Host | +-----> |           Browser             |
|                 |         |                               |
+-----------------+         +-------------------------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is first loaded from a static web host into
the browser (A), and the application then runs in the browser. This application is considered a public
client, since there is no way to issue it a client secret and there is no other secure
client authentication mechanism available in the browser.</t>

<t>The code in the browser initiates the authorization code flow with the PKCE
extension (described in <xref target="authorization_code_flow"/>) (B) above, and obtains an
access token via a POST request (C). The JavaScript app is then responsible for storing
the access token (and optional refresh token) securely using appropriate browser APIs.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it can include the access token in the request (D) and make the request directly.</t>

<t>In this scenario, the Authorization Server and Resource Server MUST support
the necessary CORS headers to enable the JavaScript code to make this POST request
from the domain on which the script is executing. (See <xref target="cors"/> for additional details.)</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps that use the authorization code grant type described in
Section 4.1 of OAuth 2.0 <xref target="RFC6749"/> MUST also follow these additional requirements
described in this section.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST prevent CSRF attacks against their redirect URI. This can be
accomplished by any of the below:</t>

<t><list style="symbols">
  <t>using PKCE, and confirming that the authorization server supports PKCE</t>
  <t>if the application is using OpenID Connect, by using the OpenID Connect "nonce" parameter</t>
  <t>using a unique value for the OAuth 2.0 "state" parameter</t>
</list></t>

<t>Browser-based apps MUST follow the recommendations in <xref target="oauth-security-topics"/> 
Section 2.1 to protect themselves during redirect flows.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers MUST require an exact match of a registered redirect URI.</t>

</section>
</section>
<section anchor="refresh_tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. With public clients, the risk of a leaked refresh token 
is greater than leaked access tokens, since an attacker may be able to 
continue using the stolen refresh token to obtain new access tokens potentially without being 
detectable by the authorization server.</t>

<t>Browser-based applications provide an attacker with several opportunities by which a
refresh token can be leaked, just as with access tokens. As such, these applications 
are considered a higher risk for handling refresh tokens.</t>

<t>Authorization servers may choose whether or not to issue refresh tokens to browser-based
applications. <xref target="oauth-security-topics"/> describes some additional requirements around refresh tokens 
on top of the recommendations of <xref target="RFC6749"/>. Applications and authorization servers 
conforming to this BCP MUST also follow the recommendations in <xref target="oauth-security-topics"/> 
around refresh tokens if refresh tokens are issued to browser-based apps.</t>

<t>In particular, authorization servers:</t>

<t><list style="symbols">
  <t>MUST rotate refresh tokens on each use, in order to be able to detect a stolen refresh token if one is replayed (described in <xref target="oauth-security-topics"/> section 4.12)</t>
  <t>MUST either set a maximum lifetime on refresh tokens OR expire if the refresh token has not been used within some amount of time</t>
  <t>upon issuing a rotated refresh token, MUST NOT extend the lifetime of the new refresh token beyond the lifetime of the initial refresh token if the refresh token has a preestablished expiration time</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>A user authorizes an application, issuing an access token that lasts 1 hour, and a refresh token that lasts 24 hours</t>
  <t>After 1 hour, the initial access token expires, so the application uses the refresh token to get a new access token</t>
  <t>The authorization server returns a new access token that lasts 1 hour, and a new refresh token that lasts 23 hours</t>
  <t>This continues until 24 hours pass from the initial authorization</t>
  <t>At this point, when the application attempts to use the refresh token after 24 hours, the request will fail and the application will have to involve the user in a new authorization request</t>
</list></t>

<t>By limiting the overall refresh token lifetime to the lifetime of the initial refresh token, this ensures a stolen refresh token cannot be used indefinitely.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs, preventing the use of wildcard domains, wildcard paths, or wildcard query string components, 
this exact match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF) attacks against their redirect URI.
Clients can accomplish this by either ensuring the authorization server supports
PKCE and relying on the CSRF protection that PKCE provides, or if the client is also an 
OpenID Connect client, using the OpenID Connect "nonce" parameter, or by using the 
"state" parameter to carry one-time-use CSRF tokens as described in <xref target="auth_code_request"/>.</t>

<t>See Section 2.1 of <xref target="oauth-security-topics"/> for additional details.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Flow">

<t>The OAuth 2.0 Implicit flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token.</t>

<section anchor="attacks-on-the-implicit-flow" title="Attacks on the Implicit Flow">

<t>Many attacks on the implicit flow described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>
do not have sufficient mitigation strategies. The following sections describe the specific
attacks that cannot be mitigated while continuing to use the implicit flow.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
their control, they will directly get access to the authorization response including the access token.
Several methods of performing this attack are described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

<t>This is discussed in more detail in Section 4.3.2 of <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser through various
means, including when the browser's HTTPS connection is being man-in-the-middled
by, for example, a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

<t>The risk of a malicious script running on the page may be amplified when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the <spanx style="verb">window.location</spanx> variable to find an access token. This threat profile
is different from an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the authorization code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE extension prevents the attacks described above by
avoiding returning the access token in the redirect response at all.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that a particular access token was
intended for that client, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front-channel redirect gives the authorization
server no assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Returning an id_token using the Implicit flow (response_type=id_token) requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent id_tokens. Performing OpenID Connect using the authorization code flow provides
the benefit of the client not needing to verify the JWT signature, as the ID token will 
have been fetched over an HTTPS connection directly from the authorization server. Additionally,
in many cases an application will request both an ID token and an access token, so it is
simplier and provides fewer attack vectors to obtain both via the authorization code flow.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. This was necessary in order to remove the
access token from the URL after it was obtained by the app.</t>

<t>Modern browsers now have the Session History API (described in "Session history and
navigation" of <xref target="HTML"/>), which provides a mechanism to modify the path and query string
component of the URL without triggering a page reload. This means modern browser-based apps can
use the unmodified OAuth 2.0 authorization code flow, since they have the ability to
remove the authorization code from the query string without triggering a page reload
thanks to the Session History API.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6750;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2019" month="July"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth authorization servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching of registered redirect URIs.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
  <t>Not support the Resource Owner Password grant for browser-based clients.</t>
  <t>Follow the <xref target="oauth-security-topics"/> recommendations on refresh tokens, as well
as the additional requirements described in <xref target="refresh_tokens"/>.</t>
</list></t>

</section>
<section anchor="document-history" title="Document History">

<t>[[ To be removed from the final specification ]]</t>

<t>-06</t>

<t><list style="symbols">
  <t>Added refresh token requirements to AS summary</t>
  <t>Editorial clarifications</t>
</list></t>

<t>-05</t>

<t><list style="symbols">
  <t>Incorporated editorial and substantive feedback from Mike Jones</t>
  <t>Added references to "nonce" as another way to prevent CSRF attacks</t>
  <t>Updated headers in the Implicit Flow section to better represent the relationship between the paragraphs</t>
</list></t>

<t>-04</t>

<t><list style="symbols">
  <t>Disallow the use of the Password Grant</t>
  <t>Add PKCE support to summary list for authorization server requirements</t>
  <t>Rewrote refresh token section to allow refresh tokens if they are time-limited, rotated on each use, and requiring that the rotated refresh token lifetimes do not extend past the lifetime of the initial refresh token, and to bring it in line with the Security BCP</t>
  <t>Updated recommendations on using state to reflect the Security BCP</t>
  <t>Updated server support checklist to reflect latest changes</t>
  <t>Updated the same-domain JS architecture section to emphasize the architecture rather than domain</t>
  <t>Editorial clarifications in the section that talks about OpenID Connect ID tokens</t>
</list></t>

<t>-03</t>

<t><list style="symbols">
  <t>Updated the historic note about the fragment URL clarifying that the Session History API means browsers can use the unmodified authorization code flow</t>
  <t>Rephrased "Authorization Code Flow" intro paragraph to better lead into the next two sections</t>
  <t>Softened "is likely a better decision to avoid using OAuth entirely" to "it may be&#8230;" for common-domain deployments</t>
  <t>Updated abstract to not be limited to public clients, since the later sections talk about confidential clients</t>
  <t>Removed references to avoiding OpenID Connect for same-domain architectures</t>
  <t>Updated headers to better describe architectures (Apps Served from a Static Web Server -&gt; JavaScript Applications without a Backend)</t>
  <t>Expanded "same-domain architecture" section to better explain the problems that OAuth has in this scenario</t>
  <t>Referenced Security BCP in implicit flow attacks where possible</t>
  <t>Minor typo corrections</t>
</list></t>

<t>-02</t>

<t><list style="symbols">
  <t>Rewrote overview section incorporating feedback from Leo Tohill</t>
  <t>Updated summary recommendation bullet points to split out application and server requirements</t>
  <t>Removed the allowance on hostname-only redirect URI matching, now requiring exact redirect URI matching</t>
  <t>Updated section 6.2 to drop reference of SPA with a backend component being a public client</t>
  <t>Expanded the architecture section to explicitly mention three architectural patterns available to JS apps</t>
</list></t>

<t>-01</t>

<t><list style="symbols">
  <t>Incorporated feedback from Torsten Lodderstedt</t>
  <t>Updated abstract</t>
  <t>Clarified the definition of browser-based apps to not exclude applications cached in the browser, e.g. via Service Workers</t>
  <t>Clarified use of the state parameter for CSRF protection</t>
  <t>Added background information about the original reason the implicit flow was created due to lack of CORS support</t>
  <t>Clarified the same-domain use case where the SPA and API share a cookie domain</t>
  <t>Moved historic note about the fragment URL into the Overview</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed, and the following individuals
who contributed ideas, feedback, and wording that shaped and formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, Janak Amarasena, John Bradley, Joseph Heenan,
Justin Richer, Karl McGuinness, Leo Tohill, Mike Jones, Tomek Stojecki, 
Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAJKil4AA7192XLcRpboe35FBv1gcrqqLFG2261ZYmhKsqiWLF6SuoqO
iRlPFpDFQhMF1MXCUo3sf79nyw0FUPR4YhjdMoklkXny7FvO53PVFV1pn+v3
Z3231qeLJ3pVN/rHpt61tpn/aFqb67PttlV5nVVmA0/mjVl188J2q3lt4KX5
Uh5e4sNzAw/Pn3yvctPBw6dPTp/Mn3w7f/KdUsW2ea67pm+70ydP/vLkVJnG
Gvmyuts91xdVZ5vKdvMX+AmVme65XmZbpbI6L6rb57pv56bNikJti+dK667O
nuu9beHXtm66xq5a//d+E/5UOM26wVfm8H+tiwrunC30JcwguyvoGi/uzDR1
lVyvG/jw+7vO0F92Y4ryuTb42L9u+bFFVm/oZt8Uz/W667bt82++oUfSJ6KP
v1joj6bobPTpF+a+yKOr9OFLWLe+yG0F27SPZ5Dj0/9qyjtTFpWdt3XZd0Vd
tfQpVdXNxnTFvcU1X706P3369C/y6/d//jb8+t0T9+sP/oE/f//se/n1h9Pv
TvHX8+tL+i+AnLHlvIatqjp9bTNYdLfXl3VZZDzBAGxYsaztXXFn9UfbdnRV
YPBuEV+i5f5U17elnQEmZHSZkeh91tVL2wAyPf1BAF0GQO92u8Xu2QLe/+bm
6huY6rNv4KFXtsvWyZzpysEMHfR3a9PtbuPpRVccLo99foXDLtqtzRb8Bs0E
nmPiaAVC867eFlmbzCjQnIfjjwAQfd43DUL3sjFZV2R2Eqw3ddPCPui3dZ5b
/DVPAHyzGLlDcAaq8FjrBntTrysgfJOXdh+P8mYxuEoj/K1fFlmdDHBW5Y3d
67dm2QMRt/EYQGuDyzTIK5PZZV3fJcO8MFVhS9yuZDFAMdGlg1XwFr3pyz3u
018O96mr67JdINuiDVp3m/KbA1Y22C1VVKuYkl7fvHub7CBe+GModfrkcKo4
t0OMUvP5XJtl2yFWKHWzLlqNDxWrAjgl0L7ObQe8odXd2mq3Ep0BUygAB+iR
Vpsq10tEsq0gFz5uOr0Btgw3VGfuAKGKqqu1ybK6BzTcrS2OfW9LAAqwo4Tf
a+D3pUxAhupbG1B7wfPeFDlgkFLA4ps67zOa7+eviujP39Q/Rz8TC2yzplha
XmImZDJYDsqvYrMt7Qa5JszXz0XkQPFfPNqqhHXAUtMl2E8AOXoP77jFwjJe
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

-->

</rfc>

