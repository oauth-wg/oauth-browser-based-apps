<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-02" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="19"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the applicaiton.</t>

<t>For example, an web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains or paths, this exact match of registered
absolute HTTPS URIs MAY be accepted by authorization servers as proof of
identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to acknowledge
Hannes Tschofenig as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAGM+9FsAA6VcW5PbuJV+x69A9TzETkmK3clMJk5tVdpte6YnvvS62+vK
0xQkQi2kKVJLkK1RXP7v+51zABCkqI53dyoptygSPDjX71yg+XyuWteW9oX+
cNG1G32+eKbXdaNfNvXe22b+0nhb6IvdzquiXlVmizuLxqzb+c40dnXv5rXB
c/NluH9J988N7p8/O1eFaXH/+bPnP86fP58//4tSbte80G3T+fb82bO/4Bas
YsLL1f3+hb6qWttUtp2/oreolWlf6OVqp9SqLlx190J3fm78yjm1cy+U1m29
eqEP1uNPXzdtY9c+fT5s+4+KyKwbemSO/2vtKnxzsdDXsg++Jvu7ME1dDa7X
DV784b41/MlujStfaEO3/S2wYbGqt/xl17gXetO2O//iD3/gW4Z3ZC9/tdCf
jWtt9upX5sEV2VV+8TX2ra8KW0FSh5yCgu7+mynvTekqO/d12bWurjy/SlV1
szWte7C0549vLs+fP/9L+POHP/8p/fljuvrnH/74Q/jzx/Pvz+nPy5tr/hd8
Fi25rCGfqtU3doWdtgd9XZduJVT1HMY2w4beuXurP1vf8tWw8XeL/BLv8ae6
vivtDOJfDZ6/KMxWvzQNtCNbAGLLrz26witT6f+yhWv/la8A3g8u8hLv6n+5
sjTYZLOrG0O85K9FjV/Zld0ubUP6/AOuv7HtajNgDl85YkWU7X5j2v1dTkR2
pbcUfBST8oHF87beuZUfvKk31iSIl+CovuyahsRz3ZhV61b2pFxu68ZDkPpt
XRSW/iwGErpdTHzDPIItJV2Pi/1Sbyp4DFOU9pCv8stidJVX+Ee3dKt6KOWq
aOxBvzXLDqbvR6IeXeZF3piVXdb1/VjUzpYkhnYk6+zS0S6E9e/rhyTdH+Gn
qnVuPj/fvns7EABd+H9LWs3nc22WviVpKdULVRZ1/2IV1I397w7C9Xrd1FtN
vlU3XVWRVyCf0NjygLdoo4MT1nA4uqvMsrSqreEwLb67LF2w28a2uoDO4PF2
Y/WuqVfW+5n2rlpZunTQG/NgdVXrvTnAwep7a3dYwvOzcMTV2rE3MuVC326c
135nV27tVkJvYVu4J8+rRyXWeMrjKbEq+s60eoswoJcg0txDFV2FV5nVqu5A
535jaaEHW0L5QekgvhAPyvA2EG683tuypH+X5FZ2Qfk9R7JNvZdNreAImBzm
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
TwAA

-->

</rfc>

