<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.4.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-oauth-browser-based-apps-09" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2022" month="March" day="07"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification details the security considerations and best practices that must be
taken into account when developing browser-based applications that use OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications executing in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices. <xref target="RFC8252"/> makes specific recommendations for how to securely implement OAuth in native
applications, including incorporating additional OAuth extensions where needed.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps and browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

<t>Many of these recommendations are derived from the OAuth 2.0 Security Best Current Practice
<xref target="oauth-security-topics"/> and browser-based apps are expected to follow those recommendations
as well. This draft expands on and further restricts various recommendations in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText="&quot;OAuth&quot;:">
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/> and <xref target="RFC6750"/>.</t>
  <t hangText="&quot;Browser-based application&quot;:">
  An application that is dynamically downloaded and executed in a web browser,
usually written in JavaScript. Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>At the time that OAuth 2.0 <xref target="RFC6749"/> and <xref target="RFC6750"/> were created, browser-based JavaScript applications needed a solution that strictly complied with the same-origin policy. Common deployments of OAuth 2.0 involved an application running on a different domain than the authorization server, so it was historically not possible to use the Authorization Code flow which would require a cross-origin POST request. This was one of the motivations for the definition of the Implicit flow, which returns the access token in the front channel via the fragment part of the URL, bypassing the need for a cross-origin POST request.</t>

<t>However, there are several drawbacks to the Implicit flow, generally involving vulnerabilities associated with the exposure of the access token in the URL. See <xref target="implicit_flow"/> for an analysis of these attacks and the drawbacks of using the Implicit flow in browsers. Additional attacks and security considerations can be found in <xref target="oauth-security-topics"/>.</t>

<t>In recent years, widespread adoption of Cross-Origin Resource Sharing (CORS), which enables exceptions to the same-origin policy, allows browser-based apps to use the OAuth 2.0 Authorization Code flow and make a POST request to exchange the authorization code for an access token at the token endpoint. In this flow, the access token is never exposed in the less secure front channel. Furthermore, adding PKCE to the flow ensures that even if an authorization code is intercepted, it is unusable by an attacker.</t>

<t>For this reason, and from other lessons learned, the current best practice for browser-based applications is to use the OAuth 2.0 Authorization Code flow with PKCE.</t>

<t>Browser-based applications:</t>

<t><list style="symbols">
  <t>MUST use the OAuth 2.0 Authorization Code flow with the PKCE extension when obtaining an access token</t>
  <t>MUST Protect themselves against CSRF attacks by either:
  <list style="symbols">
      <t>ensuring the authorization server supports PKCE, or</t>
      <t>by using the OAuth 2.0 "state" parameter or the OpenID Connect "nonce" parameter to carry one-time use CSRF tokens</t>
    </list></t>
  <t>MUST Register one or more redirect URIs, and use only exact registered redirect URIs in authorization requests</t>
</list></t>

<t>OAuth 2.0 authorization servers supporting browser-based applications:</t>

<t><list style="symbols">
  <t>MUST Require exact matching of registered redirect URIs</t>
  <t>MUST Support the PKCE extension</t>
  <t>MUST NOT issue access tokens in the authorization response</t>
  <t>If issuing refresh tokens to browser-based applications, then:
  <list style="symbols">
      <t>MUST rotate refresh tokens on each use or use sender-constrained refresh tokens, and</t>
      <t>MUST set a maximum lifetime on refresh tokens or expire if they are not used in some amount of time</t>
    </list></t>
</list></t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth was initially created to allow third-party
applications to access an API on behalf of a user, it has proven to be
useful in a first-party scenario as well. First-party apps are applications where
the same organization provides both the API and the application.</t>

<t>Examples of first-party applications are a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use a redirect-based flow (such as the OAuth Authorization Code flow)
as described later in this document.</t>

<t>The resource owner password credentials grant MUST NOT be used, as described in
<xref target="oauth-security-topics"/> Section 2.4. Instead, by using the Authorization Code flow
and redirecting the user to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single sign-on sessions,
or use third-party identity providers. In contrast, the resource owner password credentials grant does not
provide any built-in mechanism for these, and would instead be extended with custom code.</t>

</section>
<section anchor="application-architecture-patterns" title="Application Architecture Patterns">

<t>There are three primary architectural patterns available when building browser-based
applications.</t>

<t><list style="symbols">
  <t>a JavaScript application that has methods of sharing data with resource servers, such as using common-domain cookies</t>
  <t>a JavaScript application with a backend component</t>
  <t>a JavaScript application with no backend, accessing resource servers directly</t>
</list></t>

<t>These three architectures have different use cases and considerations.</t>

<section anchor="browser-based-apps-that-can-share-data-with-the-resource-server" title="Browser-Based Apps that Can Share Data with the Resource Server">

<t>For simple system architectures, such as when the JavaScript application is served
from a domain that can share cookies with the domain of the API (resource server),
OAuth adds additional attack vectors that could be avoided with a different solution.</t>

<t>In particular, using any redirect-based mechanism of obtaining an access token
enables the redirect-based attacks described in <xref target="oauth-security-topics"/> Section 4, but if
the application, authorization server and resource server share a domain, then it is
unnecessary to use a redirect mechanism to communicate between them.</t>

<t>An additional concern with handling access tokens in a browser is that as of the date of this publication, there is no
secure storage mechanism where JavaScript code can keep the access token to be later
used in an API request. Using an OAuth flow results in the JavaScript code getting an
access token, needing to store it somewhere, and then retrieve it to make an API request.</t>

<t>Instead, a more secure design is to use an HTTP-only cookie between the JavaScript application
and API so that the JavaScript code can't access the cookie value itself. The <spanx style="verb">Secure</spanx> cookie attribute should be used to ensure the cookie is not included in unencrypted HTTP requests. Additionally, the <spanx style="verb">SameSite</spanx> cookie attribute can be used to counter CSRF attacks,
but should not be considered the extent of the CSRF protection, as described in <xref target="draft-ietf-httpbis-rfc6265bis"/></t>

<t>OAuth was originally created for third-party or federated access to APIs, so it may not be
the best solution in a common-domain deployment. That said, there are still some advantages
in using OAuth even in a common-domain architecture:</t>

<t><list style="symbols">
  <t>Allows more flexibility in the future, such as if you were to later add a new domain to the system. With OAuth already in place, adding a new domain wouldn't require any additional rearchitecting.</t>
  <t>Being able to take advantage of existing library support rather than writing bespoke code for the integration.</t>
  <t>Centralizing login and multifactor support, account management, and recovery at the OAuth server, rather than making it part of the application logic.</t>
</list></t>

<t>Using OAuth for browser-based apps in a first-party same-domain scenario provides these advantages, and can be accomplished by either of the two architectural patterns described below.</t>

</section>
<section anchor="javascript-applications-with-a-backend" title="JavaScript Applications with a Backend">

<figure><artwork><![CDATA[
+-------------+  +--------------+ +---------------+
|             |  |              | |               |
|Authorization|  |    Token     | |   Resource    |
|  Endpoint   |  |   Endpoint   | |    Server     |
|             |  |              | |               |
+-------------+  +--------------+ +---------------+

       ^                ^                   ^
       |             (D)|                (G)|
       |                v                   v
       |
       |         +--------------------------------+
       |         |                                |
       |         |          Application           |
    (B)|         |            Server              |
       |         |                                |
       |         +--------------------------------+
       |
       |           ^     ^     +          ^    +
       |        (A)|  (C)|  (E)|       (F)|    |(H)
       v           v     +     v          +    v

+-------------------------------------------------+
|                                                 |
|                   Browser                       |
|                                                 |
+-------------------------------------------------+
]]></artwork></figure>

<t>In this architecture, commonly referred to as "backend for frontend" or "BFF", the JavaScript code is loaded from a dynamic Application Server (A) that also has the ability to execute code itself. This enables the ability to keep
all of the steps involved in obtaining an access token outside of the JavaScript
application.</t>

<t>Note that this application backend is not the Resource Server, it is still considered part of the OAuth client and would be accessing data at a separate resource server.</t>

<t>In this case, the Application Server initiates the OAuth flow itself, by redirecting the browser to the authorization endpoint (B). When the user is redirected back, the browser delivers the authorization code to the application server (C), where it can then exchange it for an access token at the token endpoint (D) using its client secret. The application server then keeps the access token and refresh token stored internally, and creates a separate session with the browser-based app via a
traditional browser cookie (E).</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it instead makes the request to the Application Server (F), and the Application Server will
make the request with the access token to the Resource Server (G), and forward the response (H)
back to the browser.</t>

<t>(Common examples of this architecture are an Angular front-end with a .NET backend, or
a React front-end with a Spring Boot backend.)</t>

<t>The Application Server SHOULD be considered a confidential client, and issued its own client secret. The Application Server SHOULD use the OAuth 2.0 Authorization Code grant with PKCE to initiate a request for an access token. Detailed recommendations for confidential clients can be found in <xref target="oauth-security-topics"/> Section 2.1.1.</t>

<t>In this scenario, the connection between the browser and Application Server SHOULD be a
session cookie provided by the Application Server.</t>

<t>Security of the connection between code running in the browser and this Application Server is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found in the OWASP Cheat Sheet series (https://cheatsheetseries.owasp.org/),
such as setting an HTTP-only and <spanx style="verb">Secure</spanx> cookie to authenticate the session between the
browser and Application Server.</t>

<!--
TODO: security considerations around things like Server Side Request Forgery or logging the cookies

TODO: Add another description of the alternative architecture where access tokens are passed to JS and the JS app makes API calls directly. https://mailarchive.ietf.org/arch/msg/oauth/sl-g6zYSpJW3sYqrR0peadUw54U/
-->

</section>
<section anchor="javascript-applications-without-a-backend" title="JavaScript Applications without a Backend">

<figure><artwork><![CDATA[
                      +---------------+           +--------------+
                      |               |           |              |
                      | Authorization |           |   Resource   |
                      |    Server     |           |    Server    |
                      |               |           |              |
                      +---------------+           +--------------+

                             ^     ^                 ^     +
                             |     |                 |     |
                             |(B)  |(C)              |(D)  |(E)
                             |     |                 |     |
                             |     |                 |     |
                             +     v                 +     v

+-----------------+         +-------------------------------+
|                 |   (A)   |                               |
| Static Web Host | +-----> |           Browser             |
|                 |         |                               |
+-----------------+         +-------------------------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is first loaded from a static web host into
the browser (A), and the application then runs in the browser. This application is considered a public
client, since there is no way to issue it a client secret and there is no other secure
client authentication mechanism available in the browser.</t>

<t>The code in the browser initiates the Authorization Code flow with the PKCE
extension (described in <xref target="authorization_code_flow"/>) (B) above, and obtains an
access token via a POST request (C). The JavaScript application is then responsible for storing
the access token (and optional refresh token) as securely as possible using appropriate browser APIs.
As of the date of this publication there is no browser API that allows to store tokens in a completely
secure way.
<!--
TODO: Add sentence referencing the section about service worker pattern in a future draft?
--></t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it can interact with the Resource Server directly. It includes the access token in the request (D)
and receives the Resource Server's response (E).</t>

<t>In this scenario, the Authorization Server and Resource Server MUST support
the necessary CORS headers to enable the JavaScript code to make this POST request
from the domain on which the script is executing. (See <xref target="cors"/> for additional details.)</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Browser-based applications that are public clients and use the Authorization Code grant type described in
Section 4.1 of OAuth 2.0 <xref target="RFC6749"/> MUST also follow these additional requirements
described in this section.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Browser-based applications that are public clients MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension when obtaining an access token, and authorization servers MUST support and enforce
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based applications MUST prevent CSRF attacks against their redirect URI. This can be
accomplished by any of the below:</t>

<t><list style="symbols">
  <t>using PKCE, and confirming that the authorization server supports PKCE</t>
  <t>using a unique value for the OAuth 2.0 "state" parameter</t>
  <t>if the application is using OpenID Connect, by using the OpenID Connect "nonce" parameter</t>
</list></t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers MUST require an exact match of a registered redirect URI.
As described in <xref target="oauth-security-topics"/> Section 4.1.1. this helps to prevent attacks targeting the authorization code.</t>

</section>
</section>
<section anchor="refresh_tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. With public clients, the risk of a leaked refresh token
is greater than leaked access tokens, since an attacker may be able to
continue using the stolen refresh token to obtain new access tokens potentially without being
detectable by the authorization server.</t>

<t>Browser-based applications provide an attacker with several opportunities by which a
refresh token can be leaked, just as with access tokens. As such, these applications
are considered a higher risk for handling refresh tokens.</t>

<t>Authorization servers may choose whether or not to issue refresh tokens to browser-based
applications. <xref target="oauth-security-topics"/> describes some additional requirements around refresh tokens
on top of the recommendations of <xref target="RFC6749"/>. Applications and authorization servers
conforming to this BCP MUST also follow the recommendations in <xref target="oauth-security-topics"/>
around refresh tokens if refresh tokens are issued to browser-based applications.</t>

<t>In particular, authorization servers:</t>

<t><list style="symbols">
  <t>MUST either rotate refresh tokens on each use OR use sender-constrained refresh tokens as described in <xref target="oauth-security-topics"/> Section 4.13.2</t>
  <t>MUST either set a maximum lifetime on refresh tokens OR expire if the refresh token has not been used within some amount of time</t>
  <t>MUST NOT extend the lifetime of the new refresh token beyond the lifetime of the initial refresh token</t>
  <t>upon issuing a rotated refresh token, MUST NOT extend the lifetime of the new refresh token beyond the lifetime of the initial refresh token if the refresh token has a preestablished expiration time</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>A user authorizes an application, issuing an access token that lasts 1 hour, and a refresh token that lasts 24 hours</t>
  <t>After 1 hour, the initial access token expires, so the application uses the refresh token to get a new access token</t>
  <t>The authorization server returns a new access token that lasts 1 hour, and a new refresh token that lasts 23 hours</t>
  <t>This continues until 24 hours pass from the initial authorization</t>
  <t>At this point, when the application attempts to use the refresh token after 24 hours, the request will fail and the application will have to involve the user in a new authorization request</t>
</list></t>

<t>By limiting the overall refresh token lifetime to the lifetime of the initial refresh token, this ensures a stolen refresh token cannot be used indefinitely.</t>

<t>Authorization servers MAY set different policies around refresh token issuance, lifetime and expiration for browser-based applications compared to other public clients.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs, preventing the use of wildcard domains, wildcard paths, or wildcard query string components,
this exact match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF) attacks against their redirect URI.
Clients can accomplish this by either ensuring the authorization server supports
PKCE and relying on the CSRF protection that PKCE provides, or if the client is also an
OpenID Connect client, using the OpenID Connect "nonce" parameter, or by using the
"state" parameter to carry one-time-use CSRF tokens as described in <xref target="auth_code_request"/>.</t>

<t>See Section 2.1 of <xref target="oauth-security-topics"/> for additional details.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>Authorization server mix-up attacks mark a severe threat to every client that supports
at least two authorization servers. To conform to this BCP such clients MUST apply
countermeasures to defend against mix-up attacks.</t>

<t>It is RECOMMENDED to defend against mix-up attacks by identifying and validating the issuer
of the authorization response. This can be achieved either by using the "iss" response
parameter, as defined in <xref target="oauth-iss-auth-resp"/>, or by using the "iss" Claim of the ID token
when OpenID Connect is used.</t>

<t>Alternative countermeasures, such as using distinct redirect URIs for each issuer, SHOULD
only be used if identifying the issuer as described is not possible.</t>

<t>Section 4.4 of <xref target="oauth-security-topics"/> provides additional details about mix-up attacks
and the countermeasures mentioned above.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the Authorization Code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing.</t>

</section>
<section anchor="csp" title="Content Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Flow">

<t>The OAuth 2.0 Implicit flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by the authorization server issuing an access token in the
authorization response (front channel) without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token.</t>

<t>Authorization servers MUST NOT issue access tokens in the authorization response, and MUST issue
access tokens only from the token endpoint.</t>

<section anchor="attacks-on-the-implicit-flow" title="Attacks on the Implicit Flow">

<t>Many attacks on the Implicit flow described by <xref target="RFC6819"/> and Section 4.1.2 of <xref target="oauth-security-topics"/>
do not have sufficient mitigation strategies. The following sections describe the specific
attacks that cannot be mitigated while continuing to use the Implicit flow.</t>

<section anchor="threat-manipulation-of-the-redirect-uri" title="Threat: Manipulation of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
their control, they will directly get access to the authorization response including the access token.
Several methods of performing this attack are described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

<t>This is discussed in more detail in Section 4.3.2 of <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser through various
means, including when the browser's HTTPS connection is being intercepted by, for
example, a corporate network. While man-in-the-middle attacks are typically out of scope
of basic security recommendations to prevent, in the case of browser-based apps they are
much easier to perform. An injected script can enable an attacker to have access to everything
on the page.</t>

<t>The risk of a malicious script running on the page may be amplified when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the <spanx style="verb">window.location</spanx> variable to find an access token. This threat profile
is different from an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the Authorization Code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third-Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the Authorization Code flow with PKCE extension prevents the attacks described above by
avoiding returning the access token in the redirect response at all.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that a particular access token was
intended for that client, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front-channel redirect gives the authorization
server no assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the Implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the Authorization Code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the Authorization Code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the ID Token is sent in a known format (as a JWT), and digitally
signed. Returning an ID token using the Implicit flow (<spanx style="verb">response_type=id_token</spanx>) requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent ID tokens. Performing OpenID Connect using the Authorization Code flow provides
the benefit of the client not needing to verify the JWT signature, as the ID token will
have been fetched over an HTTPS connection directly from the authorization server. Additionally,
in many cases an application will request both an ID token and an access token, so it is
simplier and provides fewer attack vectors to obtain both via the Authorization Code flow.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to browser-based apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. This was necessary in order to remove the
access token from the URL after it was obtained by the app.</t>

<t>Modern browsers now have the Session History API (described in "Session history and
navigation" of <xref target="HTML"/>), which provides a mechanism to modify the path and query string
component of the URL without triggering a page reload. This means modern browser-based apps can
use the unmodified OAuth 2.0 Authorization Code flow, since they have the ability to
remove the authorization code from the query string without triggering a page reload
thanks to the Session History API.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6750;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="draft-ietf-httpbis-rfc6265bis" >
  <front>
    <title>Cookies: HTTP State Management Mechanism</title>
    <author initials="L." surname="Chen" fullname="L. Chen">
      <organization>Google LLC</organization>
    </author>
    <author initials="S." surname="Englehardt" fullname="S. Englehardt">
      <organization>Mozilla</organization>
    </author>
    <author initials="M." surname="West" fullname="M. West">
      <organization>Google LLC</organization>
    </author>
    <author initials="J." surname="Wilander" fullname="J. Wilander">
      <organization>Apple, Inc</organization>
    </author>
    <date year="2021" month="October"/>
  </front>
</reference>
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>
<reference anchor="oauth-iss-auth-resp" >
  <front>
    <title>OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response</title>
    <author initials="K." surname="Meyer zu Selhausen" fullname="Karsten Meyer zu Selhausen">
      <organization>Hackmanit</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2021" month="January"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth authorization servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching of registered redirect URIs.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
  <t>Not support the Resource Owner Password grant for browser-based clients.</t>
  <t>Follow the <xref target="oauth-security-topics"/> recommendations on refresh tokens, as well
as the additional requirements described in <xref target="refresh_tokens"/>.</t>
</list></t>

</section>
<section anchor="document-history" title="Document History">

<t>[[ To be removed from the final specification ]]</t>

<t>-09</t>

<t><list style="symbols">
  <t>Provide additional context for the same-domain architecture pattern</t>
  <t>Added reference to draft-ietf-httpbis-rfc6265bis to clarify that SameSite is not the only CSRF protection measure needed</t>
  <t>Editorial improvements</t>
</list></t>

<t>-08</t>

<t><list style="symbols">
  <t>Added a note to use the "Secure" cookie attribute in addition to SameSite etc</t>
  <t>Updates to bring this draft in sync with the latest Security BCP</t>
  <t>Updated text for mix-up countermeasures to reference the new "iss" extension</t>
  <t>Changed "SHOULD" for refresh token rotation to MUST either use rotation or sender-constraining to match the Security BCP</t>
  <t>Fixed references to other specs and extensions</t>
  <t>Editorial improvements in descriptions of the different architectures</t>
</list></t>

<t>-07</t>

<t><list style="symbols">
  <t>Clarify PKCE requirements apply only to issuing access tokens</t>
  <t>Change "MUST" to "SHOULD" for refresh token rotation</t>
  <t>Editorial clarifications</t>
</list></t>

<t>-06</t>

<t><list style="symbols">
  <t>Added refresh token requirements to AS summary</t>
  <t>Editorial clarifications</t>
</list></t>

<t>-05</t>

<t><list style="symbols">
  <t>Incorporated editorial and substantive feedback from Mike Jones</t>
  <t>Added references to "nonce" as another way to prevent CSRF attacks</t>
  <t>Updated headers in the Implicit Flow section to better represent the relationship between the paragraphs</t>
</list></t>

<t>-04</t>

<t><list style="symbols">
  <t>Disallow the use of the Password Grant</t>
  <t>Add PKCE support to summary list for authorization server requirements</t>
  <t>Rewrote refresh token section to allow refresh tokens if they are time-limited, rotated on each use, and requiring that the rotated refresh token lifetimes do not extend past the lifetime of the initial refresh token, and to bring it in line with the Security BCP</t>
  <t>Updated recommendations on using state to reflect the Security BCP</t>
  <t>Updated server support checklist to reflect latest changes</t>
  <t>Updated the same-domain JS architecture section to emphasize the architecture rather than domain</t>
  <t>Editorial clarifications in the section that talks about OpenID Connect ID tokens</t>
</list></t>

<t>-03</t>

<t><list style="symbols">
  <t>Updated the historic note about the fragment URL clarifying that the Session History API means browsers can use the unmodified authorization code flow</t>
  <t>Rephrased "Authorization Code Flow" intro paragraph to better lead into the next two sections</t>
  <t>Softened "is likely a better decision to avoid using OAuth entirely" to "it may be..." for common-domain deployments</t>
  <t>Updated abstract to not be limited to public clients, since the later sections talk about confidential clients</t>
  <t>Removed references to avoiding OpenID Connect for same-domain architectures</t>
  <t>Updated headers to better describe architectures (Apps Served from a Static Web Server -&gt; JavaScript Applications without a Backend)</t>
  <t>Expanded "same-domain architecture" section to better explain the problems that OAuth has in this scenario</t>
  <t>Referenced Security BCP in implicit flow attacks where possible</t>
  <t>Minor typo corrections</t>
</list></t>

<t>-02</t>

<t><list style="symbols">
  <t>Rewrote overview section incorporating feedback from Leo Tohill</t>
  <t>Updated summary recommendation bullet points to split out application and server requirements</t>
  <t>Removed the allowance on hostname-only redirect URI matching, now requiring exact redirect URI matching</t>
  <t>Updated Section 6.2 to drop reference of SPA with a backend component being a public client</t>
  <t>Expanded the architecture section to explicitly mention three architectural patterns available to JS apps</t>
</list></t>

<t>-01</t>

<t><list style="symbols">
  <t>Incorporated feedback from Torsten Lodderstedt</t>
  <t>Updated abstract</t>
  <t>Clarified the definition of browser-based apps to not exclude applications cached in the browser, e.g. via Service Workers</t>
  <t>Clarified use of the state parameter for CSRF protection</t>
  <t>Added background information about the original reason the implicit flow was created due to lack of CORS support</t>
  <t>Clarified the same-domain use case where the SPA and API share a cookie domain</t>
  <t>Moved historic note about the fragment URL into the Overview</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed, and the following individuals
who contributed ideas, feedback, and wording that shaped and formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, Janak Amarasena, John Bradley, Joseph Heenan,
Justin Richer, Karl McGuinness, Karsten Meyer zu Selhausen, Leo Tohill, Mike Jones,
Tomek Stojecki, Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIADePJmIAA719aXfbRpbo9/oVeMqHSB2StuVs7Xndb2TZjpXYsZ4lv5w+
c2aSIlAU0QIBDgqQzCz/fe5WGwhIcve80UzHEgnUcuvuW83nc9WVXWWeZe9O
+m6dHS8eZ6umzZ63za017fy5tqbITrZbq4omr/UGnixavermpelW80bDS/Ol
PLzEh+caHp4//rMqdAcPHz8+Pp4/fjp//I1S5bZ9lnVtb7vjx4///PhY6dZo
mVld3z7LzurOtLXp5i9wCpXr7lm2zLdK5U1R1lfPst7Otc3LUm3LZyrLuiZ/
lu2MhV9t03atWVn/924T/lS4zKbFV+bwvywra/jmZJGdwwry65I+482d6Lap
k8+bFiZ+d91p+stsdFk9yzQ+9q9bfmyRNxv6sm/LZ9m667b22aNH9Ej6RDT5
i0X2ky47E039Qt+URfQpTXwO+87OClPDMe3iFRT49L/q6lpXZW3mtqn6rmxq
S1Opumk3uitvDO75/avT4ydP/iy/fv3Nl+HXrx67X7/1D3zz9dOv5ddvj786
xl+jI8ftLUs7b1f518dffwW/PqNlCRodnDbNdWlgh68vL8+ziw6wIHura31l
NrCJ7K3J17ou7eaA3mIkeZd3zdK0iCxPBJBVAGTXNJVd4OQLAMmjsnh053IA
9xbrblPRQOHgAfoC5zeL7HRtavpMoPxd01xVJnvz5jR58mKRvazhi7Vuiy5+
/m3za1lVOnn4LZyosd0Dhv0eniwrXRemjZ8GKqvMDIggh09PL86PE8CeNkAc
AMALkwOadbvsvKnKfDe5y7fltYkXRFg3uUY37f6JPPl2/0Rub28Xt0/pNC7f
P4KlPn0ED70yXb5O1kyf7K3Q4fvtWne3V/Hyok8c9xibfoXDLuzW5At+g1YC
zzE7sgKheddsyzxFz8DlPByfA0Cy075tEbrnrc67MjeTYL1sWgvnkL1pCjg+
+LVIAHy5GPmG4Ax8yPMJjwjNugZWq4vK7OJRAEHST2mEv/XLMm+SAU7qojW7
7I1e9sA2bTwGcLfBxzTIK52bJZBoMswLoEhT4XElmwEeFX20tws+opNtW1YP
o1ykykd70mNwXP4YSwvMHn9pjd1OHOIJnVD5q0bWB0fa3gDOnlnb4z/ENFcl
/FrWgyffw5DAK6eP+QfNx/zW7OD9X3sYu1rr3nq2QQD6YTH9AIHrtc6vNwDc
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
0rlxV1W/Wqn/Ajxc0+nfnQAA

-->

</rfc>

