<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-02" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="19"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the applicaiton.</t>

<t>For example, an web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains or paths, this exact match of registered
absolute HTTPS URIs MAY be accepted by authorization servers as proof of
identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

<t>The following individuals contributed ideas, feedback, and wording that shaped and
formed the final specification:</t>

<t>Annabelle Backman, Brock Allen, Daniel Fett, George Fletcher, Hannes Tschofenig,
Joseph Heenan, Justin Richer, Karl McGuinness, Tomek Stojecki, Torsten Lodderstedt,
and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAF9F9FsAA6VcW3PbyJV+71/RpXmInSIZW5OZTJTaqsiyPdbEF60lx5Wn
qSbQJDsCAQYNiMO4/N/3O+d0Ny4EFe/uVFIWQaBx+ly/c2nO53PVuKawF/rD
Zdts9PnimV5VtX5RV3tv6/kL422uL3c7r/IqK80Wd+a1WTXznaltdu/mlcFz
82W4f0n3zw3unz87V7lpcP/5s+c/zZ8/nz//s1JuV1/opm59c/7s2Z9xC1Yx
4eXqfn+hr8vG1qVt5i/pLSozzYVeZjulsip35fpCt35ufOac2rkLpXVTZRf6
YD3+9FXd1Hbl0+fDtvuoiMyqpkfm+L/WrsQ3lwt9I/vga7K/S1NX5eB6VePF
H+4bw5/s1rjiQhu67a+BDYus2vKXbe0u9KZpdv7iD3/gW4Z39F7+cqE/G9fY
3qtfmgeX967yi2+wb32d2xKSOvQpyOnuv5ri3hSutHNfFW3jqtLzq1RZ1VvT
uAdLe/74+ur8+fM/hz9//NMf058/pat/+vH7H8OfP53/cE5/Xt3e8L/gs2jJ
VQX5lI2+tRl22hz0TVW4TKjqOIxthg29c/dWf7a+4ath4+8W/Uu8x5+ral3Y
GcSfDZ6/zM1WvzA1tKO3AMTWv/boCi9Nqf9uc9f8u78CeD+4yEu8q/7tisJg
k/Wuqg3xkr8WNX5pM7td2pr0+Udcf22bbDNgDl85YkWU7X5jmv26T0TvSmcp
+Cgm5QOL5021c5kfvKkz1iSIF+CovmrrmsRzU5uscZk9KZe7qvYQpH5b5bml
P/OBhO4WE98wj2BLSdfjYr9UmxIew+SFPfRX+WUxusor/KNduqwaSrnMa3vQ
b82yhen7kahHl3mR1yazy6q6H4va2YLE0Ixk3bt0tAth/fvqIUn3J/ipctU3
nzd3794OBEAX/t+SVvP5XJulb0haSnVClUXdv1kFdW3/1UK4Xq/qaqvJt+q6
LUvyCuQTalsc8BZtdHDCGg5Ht6VZFlY1FRymxXdXhQt2W9tG59AZPN5srN7V
VWa9n2nvyszSpYPemAery0rvzQEOVt9bu8MSnp+FIy5Xjr2RKRb6buO89jub
uZXLhN7cNnBPnlePSqzxlMdTYlX0nWn0FmFAL0GkuYcquhKvMllWtaBzv7G0
0IMtoPygdBBfiAdFeBsIN17vbVHQv0tyK7ug/J4j2abay6YyOAImh/m13RV2
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

-->

</rfc>

