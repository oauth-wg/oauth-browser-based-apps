<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-00" category="exp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="02"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Each of these is described in more detail in the sections below.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the applicaiton.</t>

<t>For example, an web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains or paths, this exact match of registered
absolute HTTPS URIs MAY be accepted by authorization servers as proof of
identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. The Implicit Flow
cannot be protected by PKCE <xref target="RFC7636"/> (which is required according to
<xref target="authorization_code_flow"/>), so clients and authorization servers MUST NOT
use the Implicit Flow for browser-based apps.</t>

<t>There are several reasons the Implicit flow is disadvantageous compared to using
the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow simplifies the
implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="appendix-a-server-support-checklist" title="Appendix A: Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to acknowledge
Hannes Tschofenig as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

