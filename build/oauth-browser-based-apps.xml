<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-01" category="exp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="19"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the applicaiton.</t>

<t>For example, an web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains or paths, this exact match of registered
absolute HTTPS URIs MAY be accepted by authorization servers as proof of
identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to acknowledge
Hannes Tschofenig as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAIhs81sAA6VcW5PbuJV+x69A9TzETkmK28lMJk5tVdpte6YnvvS62+vK
0xQkQi2kKVJLkK1RXP7v+51zABCkqI53dyoptygSPDjX71yg+XyuWteW9oX+
cNG1G/188Uyv60a/bOq9t838pfG20Be7nVdFvarMFncWjVm3851p7OrezWuD
5+bLcP+S7p8b3D9/dq4K0+L+58/Of5yfn8/P/6KU2zUvdNt0vn3+7Nlfnj1X
WMWEl6v7/Qt9VbW2qWw7f0VvUSvTvtD2t51Sq7pw1d0L3fm58Svn1M69UFq3
9eqFPliPP33dtI1d+/T5sO0/KiKzbuiROf6vtavwzcVCX8s++Jrs78I0dTW4
Xjd48Yf71vAnuzWufKEN3fa3wIbFqt7yl13jXuhN2+78iz/8gW8Z3pG9/NVC
fzautdmrX5kHV2RX+cXX2Le+KmwFSR1yCgq6+2+mvDelq+zc12XXurry/CpV
1c3WtO7B0p4/vrl8fn7+l/DnD3/+U/rzx3T1zz/88Yfw54/Pv39Of17eXPO/
4LNoyWUN+VStvrEr7LQ96Ou6dCuhqucwthk29M7dW/3Z+pavho2/W+SXeI8/
1fVdaWcQ/2rw/EVhtvqlaaAd2QIQW37t0RVemUr/ly1c+698BfB+cJGXeFf/
y5WlwSabXd0Y4iV/LWr8yq7sdmkb0ucfcP2NbVebAXP4yhEromz3G9Pu73Ii
siu9peCjmJQPLJ639c6t/OBNvbEmQbwER/Vl1zQknuvGrFq3siflcls3HoLU
b+uisPRnMZDQ7WLiG+YRbCnpelzsl3pTwWOYorSHfJVfFqOrvMI/uqVb1UMp
V0VjD/qtWXYwfT8S9egyL/LGrOyyru/Hona2JDG0I1lnl452Iax/Xz8k6f4I
P1Wtc/P5+fbd24EA6ML/W9JqPp9rs/QtSUupXqiyqPsXq6Bu7H93EK7X66be
avKtuumqirwC+YTGlge8RRsdnLCGw9FdZZalVW0Nh2nx3WXpgt02ttUFdAaP
txurd029st7PtHfVytKlg96YB6urWu/NAQ5W31u7wxKen4UjrtaOvZEpF/p2
47z2O7tya7cSegvbwj15Xj0qscZTHk+JVdF3ptVbhAG9BJHmHqroKrzKrFZ1
Bzr3G0sLPdgSyg9KB/GFeFCGt4Fw4/XeliX9uyS3sgvK7zmSbeq9bGoFR8Dk
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
4E8AAA==

-->

</rfc>

