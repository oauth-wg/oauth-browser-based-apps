<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-00" category="exp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="02"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Each of these is described in more detail in the sections below.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the applicaiton.</t>

<t>For example, an web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Similar to native apps, a browser-based with native OAuth support is a public
client. Since the application source code is delivered to the end-user's
browser, it cannot contain provisioned secrets.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client (as defined by Section 2.1 of OAuth 2.0 <xref target="RFC6749"/>), and not
accept the secret as proof of the client's identity.  Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains or paths, this exact match of registered
absolute HTTPS URIs MAY be accepted by authorization servers as proof of
identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. The Implicit Flow
cannot be protected by PKCE <xref target="RFC7636"/> (which is required according to
<xref target="authorization_code_flow"/>), so clients and authorization servers MUST NOT
use the Implicit Flow for browser-based apps.</t>

<t>There are several reasons the Implicit flow is disadvantageous compared to using
the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow simplifies the
implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="appendix-a-server-support-checklist" title="Appendix A: Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to acknowledge
Hannes Tschofenig as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAKk13FsAA6VcW3PbOJZ+x69AeR7amZI0ifs6ntqqcTtJxz1J7LWdTc1T
CiIhCWOK5BCkFXXK/32/cw4AkrpksrVd3WWJIoGDc/3OhT2dTlXr2sKe6+uL
rl3ps9lzvaga/WtTbbxtpr8ab3N9Udde5VVWmjXuzBuzaKe1aWz24KaVwXPT
ebh/TvdPDe6fPn+uctPi/rPnL36ZvngxfX6mlKubc902nW/Pnj//K65gFRM2
Vw+bc31VtrYpbTt9SbuozLTn2n6ulcqq3JXLc935qfGZc6p250rrtsrO9dZ6
fPRV0zZ24dP37br/qojMqqFHpvhPa1fil4uZvpFz8DU534VpqnJ0vWqw8fVD
a/ibXRtXnGtDt/09sGGWVWv+sWvcuV61be3P//IXvmV8x2DzlzP90bjWDrZ+
aR5dPrjKG9/g3PoqtyUktR1SkNPdfzfFgylcaae+KrrWVaXnrVRZNWvTukdL
Z759fXn24sVfw8effv4hffwlXf35p+9/Ch9/OfvxjD5e3t3wX/BZtOSygnzK
Vt/ZDCdtt/qmKlwmVPUcxjHDgd65B6s/Wt/y1XDwd7PhJT7jb1W1LOwE4s9G
z1/kZq1/NQ20Y7AAxDa89tUVXppS/4/NXfvHcAXwfnSRl3hX/eGKwuCQTV01
hnjJP4sav7SZXc9tQ/r8E66/tm22GjGHr+yxIsp2szLtZjkkYnCltxTYSLkY
iu7N/bu3o23owv9/l+l0qs3ct43JWqV665dF3R98fN3Yf3cQldeLplprsmvd
dGVJGkn62Nhii1200cEBaCi77kozL6xqKxirxW+XhQs609hW51AcPN6urK6b
KrPeT7R3ZWbp0lavzKPVZaU3Zgvj1g/W1ljC87NwAuXCsSWYYqbvV85rX9vM
LVwm9Oa2hWl4Xt1HHcVTHk+JROk30+o1XJCeg0jzYEscAVuZLKs60LlZWVro
0RZVTZSOfBvxoAi7gXDj9cYWBf2dk0rXxE6HQ7EXXVUbOVQGJWRymF/rurBr
4kji+kzksXZ5DsYpOMGmyruMj/TlT27w9Un91+AfpQ7ywGeNAznMBWza0F5E
nh6TlwihUyZa1FgDFgVOzzIeHPzrSoDTvMbyJavw8LnIVdt4qMZoV23KXF/X
trx6SU6mtFkL7pb66tX9a/3r5Y065QPE08SDPIOeeF1388L5FaTDsl12kDbR
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

-->

</rfc>

