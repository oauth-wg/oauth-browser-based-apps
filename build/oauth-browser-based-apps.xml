<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.11 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-oauth-browser-based-apps-02" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2019" month="July" day="08"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from browser-based apps must be made using the 
authorization code grant with the PKCE extension, and should not be issued a
client secret when registered.</t>

<t>This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps as well as browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that is dynamically downloaded and executed in a web browser, 
usually written in JavaScript. Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>At the time that OAuth 2.0 RFC 6749 was created, browser-based JavaScript applications needed a solution that strictly complied with the same-origin policy. Common deployments of OAuth 2.0 involved an application running on a different domain than the authorization server, so it was historically not possible to use the authorization code flow which would require a cross-origin POST request. This was the principal motivation for the definition of the implicit flow, which returns the access token in the front channel via the fragment part of the URL, bypassing the need for a cross-origin POST request.</t>

<t>However, there are several drawbacks to the implicit flow, generally involving vulnerabilities associated with the exposure of the access token in the URL. See <xref target="implicit_flow"/> for an analysis of these attacks and the drawbacks of using the implicit flow in browsers. Additional attacks and security considerations can be found in <xref target="oauth-security-topics"/>.</t>

<t>In recent years, widespread adoption of Cross-Origin Resource Sharing (CORS), which enables exceptions to the same-origin policy, allows browser-based apps to use the OAuth 2.0 authorization code flow and make a POST request to exchange the authorization code for an access token at the token endpoint. In this flow, the access token is never exposed in the less secure front-channel. Furthermore, adding PKCE to the flow assures that even if an authorization code is intercepted, it is unusable by an attacker.</t>

<t>For this reason, and from other lessons learned, the current best practice for browser-based applications is to use the OAuth 2.0 authorization code flow with PKCE.</t>

<t>Applications should:</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Use the OAuth 2.0 state parameter to carry one-time use CSRF tokens</t>
  <t>Register one or more redirect URIs, and not vary the redirect URI per authorization request</t>
</list></t>

<t>OAuth 2.0 servers should:</t>

<t><list style="symbols">
  <t>Require exact matching of registered redirect URIs</t>
</list></t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications where
by the same organization that provides the API being accessed by the application.</t>

<t>For example, a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use the OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

</section>
<section anchor="application-architecture-patterns" title="Application Architecture Patterns">

<t>There are three primary architectural patterns available when building browser-based
applications.</t>

<t><list style="symbols">
  <t>JavaScript served from a common domain as the resource server</t>
  <t>JavaScript served from a dynamic application server</t>
  <t>JavaScript served from a static web server</t>
</list></t>

<t>These three architectures have different use cases and considerations.</t>

<section anchor="apps-served-from-a-common-domain-as-the-resource-server" title="Apps Served from a Common Domain as the Resource Server">

<t>For simple system architectures, such as when the JavaScript application is served
from a domain that can share cookies with the domain of the API (resource server), it 
is likely a better decision to avoid using OAuth entirely, and just use session 
authentication to communicate directly with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
<section anchor="apps-served-from-a-dynamic-application-server" title="Apps Served from a Dynamic Application Server">

<figure><artwork><![CDATA[
+-------------+
|             |
|Authorization|
|   Server    |
|             |
+-------------+

   ^     +
   |(A)  |(B)
   |     |
   +     v

+-------------+             +--------------+
|             | +---------> |              |
| Application |   (C)       |   Resource   |
|   Server    |             |    Server    |
|             | <---------+ |              |
+-------------+   (D)       +--------------+

    ^    +
    |    |
    |    | browser
    |    | cookie
    |    |
    +    v

+-------------+
|             |
|   Browser   |
|             |
+-------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is loaded from a dynamic Application Server 
that also has the ability to execute code itself. This enables the ability to keep
all of the steps involved in obtaining an access token outside of the JavaScript 
application.</t>

<t>(Common examples of this architecture are an Angular front-end with a .NET backend, or
a React front-end with a Spring Boot backend.)</t>

<t>The Application Server SHOULD be considered a confidential client, and issued its own client
secret. The Application Server SHOULD use the OAuth 2.0 authorization code grant to initiate
a request request for an access token. Upon handling the redirect from the Authorization
Server, the Application Server will request an access token using the authorization code
returned (A), which will be returned to the Application Server (B). The Application Server 
utilizes its own session with the browser to store the access token.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server, 
it MUST instead make the request to the Application Server, and the Application Server will 
make the request with the access token to the Resource Server (C), and forward the response (D)
back to the browser.</t>

<t>Security of the connection between code running in the browser and this Application Server is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found at the OWASP Foundation (https://www.owasp.org/),
such as setting an HTTP-only and Secure cookie to authenticate the session between the
browser and Application Server.</t>

<t>In this scenario, the session between the browser and Application Server MAY be either a
session cookie provided by the Application Server, OR the access token itself. Note that
if the access token is used as the session identifier, this exposes the access token 
to the end user even if it is not available to the JavaScript application, so some
authorization servers may wish to limit the capabilities of these clients to mitigate risk.</t>

</section>
<section anchor="apps-served-from-a-static-web-server" title="Apps Served from a Static Web Server">

<figure><artwork><![CDATA[
                      +---------------+           +--------------+
                      |               |           |              |
                      | Authorization |           |   Resource   |
                      |    Server     |           |    Server    |
                      |               |           |              |
                      +---------------+           +--------------+

                             ^     +                 ^     +
                             |     |                 |     |
                             |(B)  |(C)              |(D)  |(E)
                             |     |                 |     |
                             |     |                 |     |
                             +     v                 +     v

+-----------------+         +-------------------------------+
|                 |   (A)   |                               |
| Static Web Host | +-----> |           Browser             |
|                 |         |                               |
+-----------------+         +-------------------------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is first loaded from a static web host into
the browser (A). The application then runs in the browser, and is considered a public
client since it has no ability to be issued a client secret.</t>

<t>The code in the browser then initiates the authorization code flow with the PKCE
extension (described in <xref target="authorization_code_flow"/>) (B) above, and obtains an
access token via a POST request (C). The JavaScript app is then responsible for storing
the access token securely using appropriate browser APIs.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it can include the access token in the request (D) and make the request directly.</t>

<t>In this scenario, the Authorization Server and Resource Server MUST support
the necessary CORS headers to enable the JavaScript code to make this POST request
from the domain on which the script is executing. (See <xref target="cors"/> for additional details.)</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request, and MUST verify the returned state
in the authorization response matches the original state the app created.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers MUST require an exact match of a registered redirect URI.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. <xref target="oauth-security-topics"/> describes some additional
requirements around refresh tokens on top of the recommendations of <xref target="RFC6749"/>.</t>

<t>For public clients, the risk of a leaked refresh token is much greater than leaked
access tokens, since an attacker can potentially continue using the stoken refresh
token to obtain new access without being detectable by the authorization server.
Additionally, browser-based applications provide many attack vectors by which a
refresh token can be leaked. As such, these applications are considered a higher risk
for handling refresh tokens.</t>

<t>Authorization servers SHOULD NOT issue refresh tokens to browser-based applications.</t>

<t>If an authorization server does choose to issue refresh tokens to browser-based
applications, then it MUST issue a new refresh token with every access token refresh
response. Doing this mitigates the risk of a leaked refresh token, as a
leaked refresh token can be detected if both the attacker and the legitimate client
attempt to use the same refresh token. Authorization servers MUST follow the
additional refresh token replay mitigation techniques described in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains, paths, or query string components, this exact
match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

<t>The risk of a malicious script running on the page is far greater when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the window.location to find an access token. This threat profile is
very different compared to an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the authorization code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front channel redirect gives the authorization
server little assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching of registered redirect URIs.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="document-history" title="Document History">

<t>[[ To be removed from the final specification ]]</t>

<t>-02</t>

<t><list style="symbols">
  <t>Rewrote overview section incorporating feedback from Leo Tohill</t>
  <t>Updated summary recommendation bullet points to split out application and server requirements</t>
  <t>Removed the allowance on hostname-only redirect URI matching, now requiring exact redirect URI matching</t>
  <t>Updated section 6.2 to drop reference of SPA with a backend component being a public client</t>
  <t>Expanded the architecture section to explicitly mention three architectural patterns available to JS apps</t>
</list></t>

<t>-01</t>

<t><list style="symbols">
  <t>Incorporated feedback from Torsten Lodderstedt</t>
  <t>Updated abstract</t>
  <t>Clarified the definition of browser-based apps to not exclude applications cached in the browser, e.g. via Service Workers</t>
  <t>Clarified use of the state parameter for CSRF protection</t>
  <t>Added background information about the original reason the implicit flow was created due to lack of CORS support</t>
  <t>Clarified the same-domain use case where the SPA and API share a cookie domain</t>
  <t>Moved historic note about the fragment URL into the Overview</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed, and the following individuals
who contributed ideas, feedback, and wording that shaped and formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, John Bradley, Joseph Heenan, Justin Richer,
Karl McGuinness, Leo Tohill, Tomek Stojecki, Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIACLJI10AA71d63fbxpX/Pn/FHOVDpZZkbbd51N3dU1myY6V+aCW5Pj09
3RwQGIqIQICLh2gm8f++93fvzGAGBGQn3V2fxJZAYDBz32/O53PV5m1hnuq3
p1271k8Wj/SqqvWzuto1pp4/SxqT6dPttlFZlZbJhu7M6mTVznPTruZVQg/N
l/bmJW6eJ3Tz/NETlSUt3fzk0eM/zR99PX/0jVL5tn6q27pr2iePHv2Jbklq
k9g3q7vdU31RtqYuTTs/xytUmrRP9TLdKpVWWV7ePtVdM0+aNM/VNn+qtG6r
9Knem4Z+bKq6rc2q8b/vN/2vCtusajwyp/+1zkv65HShL2kH6V3O1+Rwp0ld
ldH1qqYXv71rE/7NbJK8eKoT3PaXrdy2SKsNf9jV+VO9bttt8/T3v+db4juC
l58v9Pskb03w6vPkPs+Cq/ziSzq3vshMSWjahzvIcPdfkuIuKfLSzJuq6Nq8
Kht+lSqrepO0+b3Bma9enD15/PhP9sevvv6j//Ebf/Xrr/7wlf3xmydfPsGP
Z9eX/C/BWUjkrCL8lK2+NimdtN3ry6rIU9lVD2E6pj3Q6/zO6PemafmqPfjr
RXiJz/htVd0WZkboT6PnT7Nko58lNVFHsAChLbz24ArnSan/ZrK8/TFcgWAf
XeQlXlc/5kWR0CHrbVUngCV/LGR8blKzWZoa9PwVXX9h2nQdAYevHIDC4Xa3
TtrdbbiJ4IrnlG/oV2GpxoJ43lbbPG2iN/Wc6hHxjCCqz7q6Bnou6yRt89RM
4uWmqhtCpH5VZZnBj1mEoZvFyCcMI+IlT+tuse+qdUniIskKsw9X+W4xuMor
/L1b5mkVY7nMarPXr5JlR6zfDFA9uMyLvEhSs6yquyGqc1MADe0A18Glg1MI
6N9U9x67kFPlKmSflzevX0UIwIV/GdNqPp/rZNm0wJZSPVJl0fxHJkFdm//u
CLmNXtXVRkeSVkPS6g2JU700epNkhuQjxEW7NlrFy5AANfq2Tog8djm9CLdc
/vXsuTYfiBIaumWmkzLTzbrqikyXFa+ZN02H96i0yEFZRJW1oRXWBhu7zYlA
apMtlLpZ541utibNV3kqb8xMS3Kq4Tc5aqZt0LuIsvgWfJa07gCqTe5o2bxs
K52kadWV9kWZuTcFcQEd7OD4hX1bQ7tv9M4UBf5dQr5sLRc0rM/W1Q47oR2Q
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

-->

</rfc>

