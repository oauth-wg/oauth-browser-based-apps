<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.11 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-oauth-browser-based-apps-03" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2019" month="July" day="24"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t><xref target="RFC8252"/> makes specific recommendations for how to securely implement OAuth in native
applications, including incorporating additional OAuth extensions where needed.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps as well as browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that is dynamically downloaded and executed in a web browser,
usually written in JavaScript. Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>At the time that OAuth 2.0 RFC 6749 was created, browser-based JavaScript applications needed a solution that strictly complied with the same-origin policy. Common deployments of OAuth 2.0 involved an application running on a different domain than the authorization server, so it was historically not possible to use the authorization code flow which would require a cross-origin POST request. This was the principal motivation for the definition of the implicit flow, which returns the access token in the front channel via the fragment part of the URL, bypassing the need for a cross-origin POST request.</t>

<t>However, there are several drawbacks to the implicit flow, generally involving vulnerabilities associated with the exposure of the access token in the URL. See <xref target="implicit_flow"/> for an analysis of these attacks and the drawbacks of using the implicit flow in browsers. Additional attacks and security considerations can be found in <xref target="oauth-security-topics"/>.</t>

<t>In recent years, widespread adoption of Cross-Origin Resource Sharing (CORS), which enables exceptions to the same-origin policy, allows browser-based apps to use the OAuth 2.0 authorization code flow and make a POST request to exchange the authorization code for an access token at the token endpoint. In this flow, the access token is never exposed in the less secure front-channel. Furthermore, adding PKCE to the flow assures that even if an authorization code is intercepted, it is unusable by an attacker.</t>

<t>For this reason, and from other lessons learned, the current best practice for browser-based applications is to use the OAuth 2.0 authorization code flow with PKCE.</t>

<t>Applications should:</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Use the OAuth 2.0 state parameter to carry one-time use CSRF tokens</t>
  <t>Register one or more redirect URIs, and not vary the redirect URI per authorization request</t>
</list></t>

<t>OAuth 2.0 servers must:</t>

<t><list style="symbols">
  <t>Require exact matching of registered redirect URIs</t>
</list></t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth was initially created to allow third-party
applications to access an API on behalf of a user, it has proven to be
useful in a first-party scenario as well. First-party apps are applications where
the same organization provides both the API and the application.</t>

<t>For example, a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use the OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

</section>
<section anchor="application-architecture-patterns" title="Application Architecture Patterns">

<t>There are three primary architectural patterns available when building browser-based
applications.</t>

<t><list style="symbols">
  <t>a JavaScript application served from a common domain as the resource server</t>
  <t>a JavaScript application with a backend</t>
  <t>a JavaScript application with no backend, accessing resource servers directly</t>
</list></t>

<t>These three architectures have different use cases and considerations.</t>

<section anchor="apps-served-from-a-common-domain-as-the-resource-server" title="Apps Served from a Common Domain as the Resource Server">

<t>For simple system architectures, such as when the JavaScript application is served
from a domain that can share cookies with the domain of the API (resource server), 
OAuth adds additional attack vectors that could be avoided with a different solution.</t>

<t>In particular, using any redirect-based mechanism of obtaining an access token
enables the redirect-based attacks described in <xref target="oauth-security-topics"/>, but if 
the application, AS and API share a domain, then it is unnecessary to use a redirect
mechanism to communicate between them.</t>

<t>An additional concern with handling access tokens in a browser is that there is no
secure storage mechanism where JavaScript code can keep the access token to be later
used in an API request. Using an OAuth flow results in the JavaScript code getting an 
access token, needing to store it somewhere, and then retrieve it to make an API request. 
Instead, it is more secure to use an HTTP-only cookie between the JavaScript application 
and API so that the JavaScript code can't access the cookie value itself.</t>

<t>In this situation, it is best to avoid letting the JavaScript code ever see the 
access token, and instead use a mechanism such as the "JavaScript Applications with a Backend"
pattern described below, to keep access tokens out of the browser.</t>

<t>If your JavaScript application has no backend, but still shares a domain with the resource
server, then it may be best to avoid using OAuth entirely.</t>

<t>OAuth was created primarily for third-party or federated access to APIs, 
so it may not be the best solution in a same-domain scenario.</t>

</section>
<section anchor="javascript-applications-with-a-backend" title="JavaScript Applications with a Backend">

<figure><artwork><![CDATA[
+-------------+
|             |
|Authorization|
|   Server    |
|             |
+-------------+

   ^     +
   |(A)  |(B)
   |     |
   +     v

+-------------+             +--------------+
|             | +---------> |              |
| Application |   (C)       |   Resource   |
|   Server    |             |    Server    |
|             | <---------+ |              |
+-------------+   (D)       +--------------+

    ^    +
    |    |
    |    | browser
    |    | cookie
    |    |
    +    v

+-------------+
|             |
|   Browser   |
|             |
+-------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is loaded from a dynamic Application Server
that also has the ability to execute code itself. This enables the ability to keep
all of the steps involved in obtaining an access token outside of the JavaScript
application.</t>

<t>(Common examples of this architecture are an Angular front-end with a .NET backend, or
a React front-end with a Spring Boot backend.)</t>

<t>The Application Server SHOULD be considered a confidential client, and issued its own client
secret. The Application Server SHOULD use the OAuth 2.0 authorization code grant to initiate
a request for an access token. Upon handling the redirect from the Authorization
Server, the Application Server will request an access token using the authorization code
returned (A), which will be returned to the Application Server (B). The Application Server
utilizes its own session with the browser to store the access token.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it MUST instead make the request to the Application Server, and the Application Server will
make the request with the access token to the Resource Server (C), and forward the response (D)
back to the browser.</t>

<t>Security of the connection between code running in the browser and this Application Server is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found at the OWASP Foundation (https://www.owasp.org/),
such as setting an HTTP-only and Secure cookie to authenticate the session between the
browser and Application Server.</t>

<t>In this scenario, the session between the browser and Application Server MAY be either a
session cookie provided by the Application Server, OR the access token itself. Note that
if the access token is used as the session identifier, this exposes the access token
to the end user even if it is not available to the JavaScript application, so some
authorization servers may wish to limit the capabilities of these clients to mitigate risk.</t>

</section>
<section anchor="javascript-applications-without-a-backend" title="JavaScript Applications without a Backend">

<figure><artwork><![CDATA[
                      +---------------+           +--------------+
                      |               |           |              |
                      | Authorization |           |   Resource   |
                      |    Server     |           |    Server    |
                      |               |           |              |
                      +---------------+           +--------------+

                             ^     +                 ^     +
                             |     |                 |     |
                             |(B)  |(C)              |(D)  |(E)
                             |     |                 |     |
                             |     |                 |     |
                             +     v                 +     v

+-----------------+         +-------------------------------+
|                 |   (A)   |                               |
| Static Web Host | +-----> |           Browser             |
|                 |         |                               |
+-----------------+         +-------------------------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is first loaded from a static web host into
the browser (A). The application then runs in the browser, and is considered a public
client since it has no ability to be issued a client secret.</t>

<t>The code in the browser then initiates the authorization code flow with the PKCE
extension (described in <xref target="authorization_code_flow"/>) (B) above, and obtains an
access token via a POST request (C). The JavaScript app is then responsible for storing
the access token securely using appropriate browser APIs.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it can include the access token in the request (D) and make the request directly.</t>

<t>In this scenario, the Authorization Server and Resource Server MUST support
the necessary CORS headers to enable the JavaScript code to make this POST request
from the domain on which the script is executing. (See <xref target="cors"/> for additional details.)</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps that use the authorization code grant type described in
Section 4.1 of OAuth 2.0 <xref target="RFC6749"/> MUST also follow these additional requirements
described in this section.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request, and MUST verify the returned state
in the authorization response matches the original state the app created.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers MUST require an exact match of a registered redirect URI.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. <xref target="oauth-security-topics"/> describes some additional
requirements around refresh tokens on top of the recommendations of <xref target="RFC6749"/>.</t>

<t>For public clients, the risk of a leaked refresh token is much greater than leaked
access tokens, since an attacker can potentially continue using the stolen refresh
token to obtain new access tokens without being detectable by the authorization server.
Additionally, browser-based applications provide many attack vectors by which a
refresh token can be leaked. As such, these applications are considered a higher risk
for handling refresh tokens.</t>

<t>Authorization servers SHOULD NOT issue refresh tokens to browser-based applications.</t>

<t>If an authorization server does choose to issue refresh tokens to browser-based
applications, then it MUST issue a new refresh token with every access token refresh
response. Doing this mitigates the risk of a leaked refresh token, as a
leaked refresh token can be detected if both the attacker and the legitimate client
attempt to use the same refresh token. Authorization servers MUST follow the
additional refresh token replay mitigation techniques described in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains, paths, or query string components, this exact
match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

<t>This is discussed in more detail in Section 4.3.2 of <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

<t>The risk of a malicious script running on the page is far greater when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the window.location to find an access token. This threat profile is
very different compared to an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the authorization code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front channel redirect gives the authorization
server little assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. This was necessary in order to remove the
access token from the URL after it was obtained by the app.</t>

<t>Modern browsers now have the Session History API (described in "Session history and
navigation" of <xref target="HTML"/>), which provides a mechanism to modify the path and query string
component of the URL without triggering a page reload. This means modern browser-based apps can
use the unmodified OAuth 2.0 authorization code flow, since they have the ability to
remove the authorization code from the query string without triggering a page reload
thanks to the Session History API.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2019" month="July"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching of registered redirect URIs.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="document-history" title="Document History">

<t>[[ To be removed from the final specification ]]</t>

<t>-03</t>

<t><list style="symbols">
  <t>Updated the historic note about the fragment URL clarifying that the Session History API means browsers can use the unmodified authorization code flow</t>
  <t>Rephrased "Authorization Code Flow" intro paragraph to better lead into the next two sections</t>
  <t>Softened "is likely a better decision to avoid using OAuth entirely" to "it may be&#8230;" for common-domain deployments</t>
  <t>Updated abstract to not be limited to public clients, since the later sections talk about confidential clients</t>
  <t>Removed references to avoiding OpenID Connect for same-domain architectures</t>
  <t>Updated headers to better describe architectures (Apps Served from a Static Web Server -&gt; JavaScript Applications without a Backend)</t>
  <t>Expanded "same-domain architecture" section to better explain the problems that OAuth has in this scenario</t>
  <t>Referenced Security BCP in implicit flow attacks where possible</t>
  <t>Minor typo corrections</t>
</list></t>

<t>-02</t>

<t><list style="symbols">
  <t>Rewrote overview section incorporating feedback from Leo Tohill</t>
  <t>Updated summary recommendation bullet points to split out application and server requirements</t>
  <t>Removed the allowance on hostname-only redirect URI matching, now requiring exact redirect URI matching</t>
  <t>Updated section 6.2 to drop reference of SPA with a backend component being a public client</t>
  <t>Expanded the architecture section to explicitly mention three architectural patterns available to JS apps</t>
</list></t>

<t>-01</t>

<t><list style="symbols">
  <t>Incorporated feedback from Torsten Lodderstedt</t>
  <t>Updated abstract</t>
  <t>Clarified the definition of browser-based apps to not exclude applications cached in the browser, e.g. via Service Workers</t>
  <t>Clarified use of the state parameter for CSRF protection</t>
  <t>Added background information about the original reason the implicit flow was created due to lack of CORS support</t>
  <t>Clarified the same-domain use case where the SPA and API share a cookie domain</t>
  <t>Moved historic note about the fragment URL into the Overview</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed, and the following individuals
who contributed ideas, feedback, and wording that shaped and formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, Janak Amarasena, John Bradley, Joseph Heenan,
Justin Richer, Karl McGuinness, Leo Tohill, Tomek Stojecki, Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAKnlOF0AA71dW3PcuJV+x69AaR5G3nR3bM81zm4qsmyPNfFFK8lxpVLZ
KTSJVnPEJnsJUu0ej//7nhtAgE3KmmQrrhlbYpMgcHAu37ng9Hw+V23RlvaJ
fnvStWv9ePFQr+pGP23qnbPN/KlxNtcn261TeZ1VZgN35o1ZtfPCtqt5beCh
+VJuXuLNcwM3zx9+pXLTws2PHz76w/zhd/PHXytVbJsnum061z5++PAPDx8r
01gjb1Y3uyf6rGptU9l2/gxfoTLTPtHLbKtUVudFdf1Ed25uXFYUals8UVq3
dfZE762DH13dtI1dufD7ftP/qnCadYOPzOF/rYsKPjlZ6HOYQXZT0DVe3Ilp
6iq5Xjfw4rc3raHf7MYU5RNt8LY/b/m2RVZv6MOuKZ7oddtu3ZPf/55uSe+I
Xv5sod+borXRq5+Z2yKPrtKLz2Hd+iy3FWzTPp5Bjnf/2ZQ3piwqO3d12bVF
XTl6larqZmPa4tbimi9enD5+9OgP8uO3330dfvw+XP3u26++lR+/f/zNY/zx
9PKc/gU6M4uc1rA/VasvbQYrbff6vC6LjGfVUxiWKQt6XdxY/d66lq7Kwl8v
4ku0xh/q+rq0M9j+LHn+JDcb/dQ0wB3RALBt8bU7R3hmKv1XmxftL/EIQPvk
Ig3xuv6lKEsDi2y2dWOQlvQxs/Ezm9nN0jbIz9/C9Re2zdYJcejKASn83u7W
pt1dx5OIrgRJ+R5+ZZFyQuJ5W2+LzCVv6iU1bMRToKg+7ZoGt+e8MVlbZHZy
X67qxsFG6ld1nlv8MU926Gox8gnRCGQp8Lof7Md6XYG6MHlp9/EoPy4GV2mE
v3XLIqvTXa7yxu71K7PsQPTdYKsHl2mQFyazy7q+GW51YUvchnaw19Glg1Uw
6X/syj1pKtBR1SoWnZdXr18lxMcL//Iuq/l8rs3StbhTSl2tC6fd1mbFqsiI
83RuW5Byp9u11Z4XdAbiXcC+0C34mWn1BrSpXlrVmhvY0aJqa22yrO6AD3Zr
iwPd2hJ4CLRIoqY1qOlS3uZm2ji9s2WJ/y5ROrfCQ46swbre4UxgBiBPNB0L
BCs229JukOMCRy54aZsih41XCvR5U+ddRkv6+EUR/fpJ/Vf0Z4IGLmsKmA5R
IRPuxunpdHphIrjKMBdR+sUvPNqqhNUDgZKF66arKnwKH+ZFwQ2eUrCaFzB8
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
8ytfS7Dor+E+toHRfSPPDt8h6Wf9P/T37/yvvx6fPMC/nz4IV6JB8E76+3Z0
4slr08/GVxXd9KfBZ2EpMZjDW45PH0QzCzggXntEj8H7Pk8s/Z/RekandLjo
42d+SgeL9mRjOgcy88i/Dn71Yji8zNpp6lki+/iGTHMS/C85milCjHONV4kx
SJqNaj64SRI4Hg9xeifZUEFv7H1hnmYtOo+j1HuOXFLuR0YVh58C/jHciB5A
VafAq/fKDTTs1vX5DgRbUwgGdSIiUv9ovyiVxj2OBZVK7EMi3QPCcNgFTF91
jfhKop6gHbyyWLx5ftXrUvDWDDA0hrAO7rzcUoz5aY06ix9YPOBc6CE9teQ0
lzaNJaAbz86a8QEasULOdUgZzBHtKvkIoQrY8oW++yX3imWy0wd7wxGz1ioT
gtMjkWdALlsyNoKxkjAhsdOBZ64ue+syNtsd2ij/yuGu9wmIw7krTgUBeUA1
+ug+jba0OnwmHv3Ii0GVTpFQgbkpi1+weEMoL352bzw9lAyga4gDFxiV/Ixn
UiVD7QzmAgMyi5MEI57VTBUSqfFQhR7jHUkePFxfAIVTG6IOxgoLH2Ldkamh
KZBQfd3sTJN7uIF1Jxa1skJR8U/3GCcUxImUZxyQKigSywiTuDYqiogJyIsC
WR9ZVeEU5ik2zBKyvyEIUGKYEMMkrbwuAD630M+kmAuVhkAzl9Vb1EVqkIpH
1LVhNy2te0myXgJ+374/uTyP6nL0sa893e12ixow1XZRN9e/fzBTHnW63gno
MTgu+5IhusBlBG19RMlK3JA5OILqKibcIc1ioC04azY1lL57KP365G8UHioo
bWOUH0ImPIxGj7Hs24uRlJZYnRBlVsVYepSChiHE69/NGndVsHJCs0V5scPc
shJGRbVP8Tuf5GKnA+FqH2WSe8dFnhLx6JupsdChI/S7K9waRymLTcGMkplt
nxwOmVs2Bqww4KNr3OimcDefw8LIwr8VDs89Ih7/M0BXCeAchZvjf3694/dR
xDc1TBoaHg5zAE3vmE0PSg9nMwSsdwwz8ftvWNRvIvEd48gf8S6mrn9+gF+j
v0eu32MAsL/4d/AawvVndP35g3/HJP7VAcTrmro+Bv7T3Tv8bExexmdILuHI
Z4M7ZYRLLObL9Hu71C9rsOjeyUsdvN75OBxhbA7Dn+6aw79Gh9/m4lDqa+Do
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
q5X6P6qDZFFeegAA

-->

</rfc>

