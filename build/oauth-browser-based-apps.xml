<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-02" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="December" day="08"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps as well as browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the application.</t>

<t>For example, a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

</section>
<section anchor="architectural-considerations" title="Architectural Considerations">

<t>In some cases, it may make sense to avoid the use of a strictly browser-based OAuth
application entirely, instead using an architecture that can provide better security.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
<section anchor="browser-based-app-with-a-backend-component" title="Browser-Based App with a Backend Component">

<t>To avoid the risks inherent in handling OAuth access tokens from a purely browser-based
application, implementations may wish to move the authorization code exchange and
handling of access and refresh tokens into a backend component.</t>

<t>The backend component essentially becomes a new authorization server for the code
running in the browser, issuing its own tokens (e.g. a session cookie). Security of
the connection between code running in the browser and this backend component is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found at the OWASP Foundation (https://www.owasp.org/).</t>

<t>In this scenario, the backend component may be a confidential client which is issued
its own client secret. Despite this, there are still some ways in which this application
is effectively a public client, as the end result is the application's code is still
running in the browser and visible to the user. Some authorization servers may have
different policies for public and confidential clients, and this type of hybrid
approach does not provide all the assurances of confidential clients that an
authorization server is expecting. Authorization servers may wish to treat this type
of deployment as a public client.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request, and MUST verify the returned state
in the authorization response matches the original state the app created.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="refresh-tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. <xref target="oauth-security-topics"/> describes some additional
requirements around refresh tokens on top of the recommendations of <xref target="RFC6749"/>.</t>

<t>For public clients, the risk of a leaked refresh token is much greater than leaked
access tokens, since an attacker can potentially continue using the stoken refresh
token to obtain new access without being detectable by the authorization server.
Additionally, browser-based applications provide many attack vectors by which a
refresh token can be leaked. As such, these applications are considered a higher risk
for handling refresh tokens.</t>

<t>Authorization servers SHOULD NOT issue refresh tokens to browser-based applications.</t>

<t>If an authorization server does choose to issue refresh tokens to browser-based
applications, then it MUST issue a new refresh token with every access token refresh
response. Doing this mitigates the risk of a leaked refresh token, as a
leaked refresh token can be detected if both the attacker and the legitimate client
attempt to use the same refresh token. Authorization servers MUST follow the
additional refresh token replay mitigation techniques described in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains, paths, or query string components, this exact
match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

<t>The risk of a malicious script running on the page is far greater when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the window.location to find an access token. This threat profile is
very different compared to an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the authorization code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front channel redirect gives the authorization
server little assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

<t>The following individuals contributed ideas, feedback, and wording that shaped and
formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, John Bradley, Joseph Heenan, Justin Richer,
Karl McGuinness, Tomek Stojecki, Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIANs5DFwAA6VcW5Mbt5V+x69AjR8spUhGUmLHUWqrMhpZ1ji6zGrGUeXJ
BbLBITLNBrfRPRSt0n/fcwMaaDbHyq4rKQ37ggYOzuU7N8znc9W5rrbP9fvz
vtvoZ4sneu1b/aL1+2Db+QsTbKXPd7ugKr9qzBaerFqz7uY709rVnZt7A+/N
l/L8Ep+fG3h+/uSZqkwHzz978vSH+dNn8yc/KOV27XPdtX3onj158ld4BEYx
8nF1t3+uL5vOto3t5i/xK2pluud6udoptfKVa26f6z7MTVg5p3buudK686vn
+mAD/Bl827V2HdLvw3b4qXCavsVX5vB/rV0Dd84X+orXQdd4feem9U1x3bfw
4fd3naFfdmtc/VwbfOzvQobFym/pZt+653rTdbvw/I9/pEfKJ7KPv1zoj8Z1
Nvv0S3PvquwqffgK1q0vK9vATh3yGVT49N9NfWdq19h58HXfOd8E+pRqfLs1
nbu3uOYPry6ePX36V/nz+7/8Of35Q7r6l+//9L38+cOz757hnxfXV/Qv0Jm5
5MLD/jSdvrYrWGl30Fe+diue1UBhWKYs6K27s/qjDR1dlYW/XeSXaI0/eX9b
2xls/6p4/7wyW/3CtMAd2QCwbfm1B0d4aRr9T1u57rd8BKB9cZGGeOt/c3Vt
YJHtzrcGaUm3mY1f2pXdLm2L/Pw9XH9lu9WmIA5dOSJF3Nv9xnT723wS2ZVB
UuAni1QQEs87v3OrUHxpENa0ES+Aovqib1vcnqvWrDq3sif35ca3ATZSv/FV
ZfHPqtihm8XEHaIRyFLi9TjYz37TgMYwVW0P+Sg/L0ZXaYR/9Uu38uUuN1Vr
D/qNWfYg+mG01aPLNMgrs7JL7+/GW+1sjdvQjfY6u3S0Cib9O3+fdhf1VLPO
xef1zds3xQbghf/3Tqv5fK7NMnS4W0oNm8qDut+IBXVr/6eHzQ163fqtRt2q
275pUCugTmhtfYCvaKNFCWtQOLpvzLK2qvOgMC3cu6idyG1rO10Bz8Dr3cbq
XetXNoSZDq5ZWbx00Btzb3Xj9d4cQMHqO2t3MESgd0ERN2tH2sjUC32zcUGH
nV25tVvxfCvbgXoKNHpkYg1vBXiLpQrvmU5vwQzoJUzS3AErugY+ZVYr38M8
9xuLA93bGpgfZlrYF6RBLV+DiZug97au8d8lqpWdMH8gS7bxe17UChQBTYfo
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

-->

</rfc>

