<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-oauth-browser-based-apps-05" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2020" month="February" day="28"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification details the security considerations and best practices that must be
taken into account when developing browser-based applications that use OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications executing in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices. <xref target="RFC8252"/> makes specific recommendations for how to securely implement OAuth in native
applications, including incorporating additional OAuth extensions where needed.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps and browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/> and <xref target="RFC6750"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that is dynamically downloaded and executed in a web browser,
usually written in JavaScript. Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>At the time that OAuth 2.0 <xref target="RFC6749"/> and <xref target="RFC6750"/> were created, browser-based JavaScript applications needed a solution that strictly complied with the same-origin policy. Common deployments of OAuth 2.0 involved an application running on a different domain than the authorization server, so it was historically not possible to use the authorization code flow which would require a cross-origin POST request. This was one of the motivations for the definition of the implicit flow, which returns the access token in the front channel via the fragment part of the URL, bypassing the need for a cross-origin POST request.</t>

<t>However, there are several drawbacks to the implicit flow, generally involving vulnerabilities associated with the exposure of the access token in the URL. See <xref target="implicit_flow"/> for an analysis of these attacks and the drawbacks of using the implicit flow in browsers. Additional attacks and security considerations can be found in <xref target="oauth-security-topics"/>.</t>

<t>In recent years, widespread adoption of Cross-Origin Resource Sharing (CORS), which enables exceptions to the same-origin policy, allows browser-based apps to use the OAuth 2.0 authorization code flow and make a POST request to exchange the authorization code for an access token at the token endpoint. In this flow, the access token is never exposed in the less secure front-channel. Furthermore, adding PKCE to the flow ensures that even if an authorization code is intercepted, it is unusable by an attacker.</t>

<t>For this reason, and from other lessons learned, the current best practice for browser-based applications is to use the OAuth 2.0 authorization code flow with PKCE.</t>

<t>Browser-based applications MUST:</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Protect themselves against CSRF attacks by ensuring the authorization server supports PKCE, or by using the OAuth 2.0 "state" parameter or the OpenID Connect "nonce" parameter to carry one-time use CSRF tokens</t>
  <t>Register one or more redirect URIs, and use only exact registered redirect URIs in authorization requests</t>
</list></t>

<t>OAuth 2.0 authorization servers MUST:</t>

<t><list style="symbols">
  <t>Require exact matching of registered redirect URIs</t>
  <t>Support the PKCE extension</t>
</list></t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth was initially created to allow third-party
applications to access an API on behalf of a user, it has proven to be
useful in a first-party scenario as well. First-party apps are applications where
the same organization provides both the API and the application.</t>

<t>Examples of first-party applications are a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use a redirect-based flow (such as the OAuth Authorization Code flow) 
as described later in this document.</t>

<t>The Resource Owner Password Grant MUST NOT be used, as described in 
<xref target="oauth-security-topics"/> section 3.4. Instead, by using the Authorization Code flow 
and redirecting the user to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and would instead be extended with custom code.</t>

</section>
<section anchor="application-architecture-patterns" title="Application Architecture Patterns">

<t>There are three primary architectural patterns available when building browser-based
applications.</t>

<t><list style="symbols">
  <t>a JavaScript application that has methods of sharing data with resource servers, such as using common-domain cookies</t>
  <t>a JavaScript application with a backend</t>
  <t>a JavaScript application with no backend, accessing resource servers directly</t>
</list></t>

<t>These three architectures have different use cases and considerations.</t>

<section anchor="browser-based-apps-that-can-share-data-with-the-resource-server" title="Browser-Based Apps that Can Share Data with the Resource Server">

<t>For simple system architectures, such as when the JavaScript application is served
from a domain that can share cookies with the domain of the API (resource server), 
OAuth adds additional attack vectors that could be avoided with a different solution.</t>

<t>In particular, using any redirect-based mechanism of obtaining an access token
enables the redirect-based attacks described in <xref target="oauth-security-topics"/>, but if 
the application, authorization server and resource server share a domain, then it is 
unnecessary to use a redirect mechanism to communicate between them.</t>

<t>An additional concern with handling access tokens in a browser is that as of the date of this publication, there is no
secure storage mechanism where JavaScript code can keep the access token to be later
used in an API request. Using an OAuth flow results in the JavaScript code getting an 
access token, needing to store it somewhere, and then retrieve it to make an API request.</t>

<t>Instead, a more secure design is to use an HTTP-only cookie between the JavaScript application 
and API so that the JavaScript code can't access the cookie value itself. Additionally, the SameSite
cookie attribute can be used to prevent CSRF attacks, or alternatively, the application
and API could be written to use anti-CSRF tokens.</t>

<t>OAuth was originally created for third-party or federated access to APIs, so it may not be
the best solution in a common-domain deployment. That said, using OAuth even in a common-domain
architecture does mean you can more easily rearchitect things later, such as if you were 
to later add a new domain to the system.</t>

</section>
<section anchor="javascript-applications-with-a-backend" title="JavaScript Applications with a Backend">

<figure><artwork><![CDATA[
+-------------+
|             |
|Authorization|
|   Server    |
|             |
+-------------+

   ^     +
   |(A)  |(B)
   |     |
   +     v

+-------------+             +--------------+
|             | +---------> |              |
| Application |   (C)       |   Resource   |
|   Server    |             |    Server    |
|             | <---------+ |              |
+-------------+   (D)       +--------------+

    ^    +
    |    |
    |    | browser
    |    | cookie
    |    |
    +    v

+-------------+
|             |
|   Browser   |
|             |
+-------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is loaded from a dynamic Application Server
that also has the ability to execute code itself. This enables the ability to keep
all of the steps involved in obtaining an access token outside of the JavaScript
application.</t>

<t>In this case, the Application Server performs the OAuth flow itself, and keeps the 
access token and refresh token stored internally, creating a separate session with
the browser-based app via a traditional browser cookie.</t>

<t>(Common examples of this architecture are an Angular front-end with a .NET backend, or
a React front-end with a Spring Boot backend.)</t>

<t>The Application Server SHOULD be considered a confidential client, and issued its own client
secret. The Application Server SHOULD use the OAuth 2.0 authorization code grant to initiate
a request for an access token. Upon handling the redirect from the Authorization
Server, the Application Server will request an access token using the authorization code
returned (A), which will be returned to the Application Server (B). The Application Server
stores this access token itself and establishes its own cookie-based session with the Browser application.
The Application Server can store the access token either server-side, or in the cookie itself.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it MUST instead make the request to the Application Server, and the Application Server will
make the request with the access token to the Resource Server (C), and forward the response (D)
back to the browser.</t>

<t>Security of the connection between code running in the browser and this Application Server is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found in the OWASP Cheat Sheet series (https://cheatsheetseries.owasp.org/),
such as setting an HTTP-only and Secure cookie to authenticate the session between the
browser and Application Server.</t>

<t>In this scenario, the session between the browser and Application Server MAY be either a
session cookie provided by the Application Server, OR the access token itself. Note that
if the access token is used as the session identifier, this exposes the access token
to the end user even if it is not available to the JavaScript application, so some
authorization servers may wish to limit the capabilities of these clients to mitigate risk.</t>

</section>
<section anchor="javascript-applications-without-a-backend" title="JavaScript Applications without a Backend">

<figure><artwork><![CDATA[
                      +---------------+           +--------------+
                      |               |           |              |
                      | Authorization |           |   Resource   |
                      |    Server     |           |    Server    |
                      |               |           |              |
                      +---------------+           +--------------+

                             ^     +                 ^     +
                             |     |                 |     |
                             |(B)  |(C)              |(D)  |(E)
                             |     |                 |     |
                             |     |                 |     |
                             +     v                 +     v

+-----------------+         +-------------------------------+
|                 |   (A)   |                               |
| Static Web Host | +-----> |           Browser             |
|                 |         |                               |
+-----------------+         +-------------------------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is first loaded from a static web host into
the browser (A), and the application then runs in the browser. This application is considered a public
client, since there is no way to issue it a client secret and there is no other secure
client authentication mechanism available in the browser.</t>

<t>The code in the browser initiates the authorization code flow with the PKCE
extension (described in <xref target="authorization_code_flow"/>) (B) above, and obtains an
access token via a POST request (C). The JavaScript app is then responsible for storing
the access token (and optional refresh token) securely using appropriate browser APIs.</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it can include the access token in the request (D) and make the request directly.</t>

<t>In this scenario, the Authorization Server and Resource Server MUST support
the necessary CORS headers to enable the JavaScript code to make this POST request
from the domain on which the script is executing. (See <xref target="cors"/> for additional details.)</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps that use the authorization code grant type described in
Section 4.1 of OAuth 2.0 <xref target="RFC6749"/> MUST also follow these additional requirements
described in this section.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST prevent CSRF attacks against their redirect URI. This can be
accomplished by any of the below:</t>

<t><list style="symbols">
  <t>using PKCE, and confirming that the authorization server supports PKCE</t>
  <t>if the application is using OpenID Connect, by using the OpenID Connect "nonce" parameter</t>
  <t>using a unique value for the OAuth 2.0 "state" parameter</t>
</list></t>

<t>Browser-based apps MUST follow the recommendations in <xref target="oauth-security-topics"/> 
Section 2.1 to protect themselves during redirect flows.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers MUST require an exact match of a registered redirect URI.</t>

</section>
</section>
<section anchor="refresh_tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. With public clients, the risk of a leaked refresh token 
is greater than leaked access tokens, since an attacker may be able to 
continue using the stolen refresh token to obtain new access tokens potentially without being 
detectable by the authorization server.</t>

<t>Browser-based applications provide an attacker with several opportunities by which a
refresh token can be leaked, just as with access tokens. As such, these applications 
are considered a higher risk for handling refresh tokens.</t>

<t>Authorization servers may choose whether or not to issue refresh tokens to browser-based
applications. <xref target="oauth-security-topics"/> describes some additional requirements around refresh tokens 
on top of the recommendations of <xref target="RFC6749"/>. Applications and authorization servers 
conforming to this BCP MUST also follow the recommendations in <xref target="oauth-security-topics"/> 
around refresh tokens if refresh tokens are issued to browser-based apps.</t>

<t>In particular, authorization servers:</t>

<t><list style="symbols">
  <t>MUST rotate refresh tokens on each use, in order to be able to detect a stolen refresh token if one is replayed (described in <xref target="oauth-security-topics"/> section 4.12)</t>
  <t>MUST either set a maximum lifetime on refresh tokens OR expire if the refresh token has not been used within some amount of time</t>
  <t>upon issuing a rotated refresh token, MUST NOT extend the lifetime of the new refresh token beyond the lifetime of the initial refresh token if the refresh token has a preestablished expiration time</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>A user authorizes an application, issuing an access token that lasts 1 hour, and a refresh token that lasts 24 hours</t>
  <t>After 1 hour, the initial access token expires, so the application uses the refresh token to get a new access token</t>
  <t>The authorization server returns a new access token that lasts 1 hour, and a new refresh token that lasts 23 hours</t>
  <t>This continues until 24 hours pass from the initial authorization</t>
  <t>At this point, when the application attempts to use the refresh token after 24 hours, the request will fail and the application will have to involve the user in a new authorization request</t>
</list></t>

<t>By limiting the overall refresh token lifetime to the lifetime of the initial refresh token, this ensures a stolen refresh token cannot be used indefinitely.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs, preventing the use of wildcard domains, wildcard paths, or wildcard query string components, 
this exact match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF) attacks against their redirect URI.
Clients can accomplish this by either ensuring the authorization server supports
PKCE and relying on the CSRF protection that PKCE provides, or if the client is also an 
OpenID Connect client, using the OpenID Connect "nonce" parameter, or by using the 
"state" parameter to carry one-time-use CSRF tokens as described in <xref target="auth_code_request"/>.</t>

<t>See Section 2.1 of <xref target="oauth-security-topics"/> for additional details.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Flow">

<t>The OAuth 2.0 Implicit flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token.</t>

<section anchor="attacks-on-the-implicit-flow" title="Attacks on the Implicit Flow">

<t>Many attacks on the implicit flow described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>
do not have sufficient mitigation strategies. The following sections describe the specific
attacks that cannot be mitigated while continuing to use the implicit flow.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
their control, they will directly get access to the fragment carrying the access token.
Several methods of performing this attack are described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

<t>This is discussed in more detail in Section 4.3.2 of <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser through various
means, including when the browser's HTTPS connection is being man-in-the-middled
by, for example, a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

<t>The risk of a malicious script running on the page may be amplified when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the <spanx style="verb">window.location</spanx> variable to find an access token. This threat profile
is different from an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the authorization code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE extension prevents the attacks described above by
avoiding returning the access token in the redirect URI at all.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front channel redirect gives the authorization
server no assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Returning an id_token using the Implicit flow (response_type=id_token) requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent id_tokens. Performing OpenID Connect using the authorization code flow provides
the benefit of the client not needing to verify the JWT signature, as the ID token will 
have been fetched over an HTTPS connection directly from the authorization server. Additionally,
in many cases an application will request both an ID token and an access token, so it is
simplier and provides fewer attack vectors to obtain both via the authorization code flow.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. This was necessary in order to remove the
access token from the URL after it was obtained by the app.</t>

<t>Modern browsers now have the Session History API (described in "Session history and
navigation" of <xref target="HTML"/>), which provides a mechanism to modify the path and query string
component of the URL without triggering a page reload. This means modern browser-based apps can
use the unmodified OAuth 2.0 authorization code flow, since they have the ability to
remove the authorization code from the query string without triggering a page reload
thanks to the Session History API.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6750;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2019" month="July"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth authorization servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching of registered redirect URIs.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
  <t>Not support the Resource Owner Password grant for browser-based clients.</t>
  <t>Follow the <xref target="oauth-security-topics"/> recommendations on refresh tokens, as well
as the additional requirements described in <xref target="refresh_tokens"/>.</t>
</list></t>

</section>
<section anchor="document-history" title="Document History">

<t>[[ To be removed from the final specification ]]</t>

<t>-05</t>

<t><list style="symbols">
  <t>Incorporated editorial and substantive feedback from Mike Jones</t>
  <t>Added references to "nonce" as another way to prevent CSRF attacks</t>
  <t>Updated headers in the Implicit Flow section to better represent the relationship between the paragraphs</t>
</list></t>

<t>-04</t>

<t><list style="symbols">
  <t>Disallow the use of the Password Grant</t>
  <t>Add PKCE support to summary list for authorization server requirements</t>
  <t>Rewrote refresh token section to allow refresh tokens if they are time-limited, rotated on each use, and requiring that the rotated refresh token lifetimes do not extend past the lifetime of the initial refresh token, and to bring it in line with the Security BCP</t>
  <t>Updated recommendations on using state to reflect the Security BCP</t>
  <t>Updated server support checklist to reflect latest changes</t>
  <t>Updated the same-domain JS architecture section to emphasize the architecture rather than domain</t>
  <t>Editorial clarifications in the section that talks about OpenID Connect ID tokens</t>
</list></t>

<t>-03</t>

<t><list style="symbols">
  <t>Updated the historic note about the fragment URL clarifying that the Session History API means browsers can use the unmodified authorization code flow</t>
  <t>Rephrased "Authorization Code Flow" intro paragraph to better lead into the next two sections</t>
  <t>Softened "is likely a better decision to avoid using OAuth entirely" to "it may be&#8230;" for common-domain deployments</t>
  <t>Updated abstract to not be limited to public clients, since the later sections talk about confidential clients</t>
  <t>Removed references to avoiding OpenID Connect for same-domain architectures</t>
  <t>Updated headers to better describe architectures (Apps Served from a Static Web Server -&gt; JavaScript Applications without a Backend)</t>
  <t>Expanded "same-domain architecture" section to better explain the problems that OAuth has in this scenario</t>
  <t>Referenced Security BCP in implicit flow attacks where possible</t>
  <t>Minor typo corrections</t>
</list></t>

<t>-02</t>

<t><list style="symbols">
  <t>Rewrote overview section incorporating feedback from Leo Tohill</t>
  <t>Updated summary recommendation bullet points to split out application and server requirements</t>
  <t>Removed the allowance on hostname-only redirect URI matching, now requiring exact redirect URI matching</t>
  <t>Updated section 6.2 to drop reference of SPA with a backend component being a public client</t>
  <t>Expanded the architecture section to explicitly mention three architectural patterns available to JS apps</t>
</list></t>

<t>-01</t>

<t><list style="symbols">
  <t>Incorporated feedback from Torsten Lodderstedt</t>
  <t>Updated abstract</t>
  <t>Clarified the definition of browser-based apps to not exclude applications cached in the browser, e.g. via Service Workers</t>
  <t>Clarified use of the state parameter for CSRF protection</t>
  <t>Added background information about the original reason the implicit flow was created due to lack of CORS support</t>
  <t>Clarified the same-domain use case where the SPA and API share a cookie domain</t>
  <t>Moved historic note about the fragment URL into the Overview</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed, and the following individuals
who contributed ideas, feedback, and wording that shaped and formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, Janak Amarasena, John Bradley, Joseph Heenan,
Justin Richer, Karl McGuinness, Leo Tohill, Mike Jones, Tomek Stojecki, 
Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
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
1Ur9Nwl+xHZbiQAA

-->

</rfc>

