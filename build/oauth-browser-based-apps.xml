<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.9 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-parecki-oauth-browser-based-apps-00" category="exp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2018" month="November" day="19"/>

    <area>OAuth</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>OAuth 2.0 authorization requests from apps running entirely in a browser are unable
to use a Client Secret during the process, since they have no way to keep a secret
confidential. This specification details the security considerations that must be
taken into account when developing browser-based applications, as well as best
practices for how they can securely implement OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications running entirely in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices.</t>

<t>AppAuth steers developers away from performing user authorization via embedding user
agents such as browser controls into native apps, instead insisting that an external
agent (such as the system browser) be used. The RFC continues on to promote
capabilities and supplemental specifications beyond the base OAuth 2.0 and
OpenID Connect specifications to improve baseline security, such as <xref target="RFC7636"/>,
also known as PKCE.</t>

<t>This specification addresses the similarities between implementing OAuth for native
apps as well as browser-based apps, and includes additional considerations when
running in a browser. This is primarily focused on OAuth, except where OpenID Connect
provides additional considerations.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that runs entirely in a web browser, usually written in
JavaScript, where the source code is downloaded from a domain prior to execution.
Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>For authorizing users within a browser-based application, the best current practice is to</t>

<t><list style="symbols">
  <t>Use the OAuth 2.0 authorization code flow with the PKCE extension</t>
  <t>Require the OAuth 2.0 state parameter</t>
  <t>Recommend exact matching of redirect URIs, and require the hostname of the redirect URI match the hostname of the URL the app was served from</t>
  <t>Do not return access tokens in the front channel</t>
</list></t>

<t>Previously it was recommended that browser-based applications use the OAuth 2.0 Implicit
flow. That approach has several drawbacks, including the fact that access tokens are
returned in the front-channel via the fragment part of the redirect URI, and as such
are vulnerable to a variety of attacks where the access token can be intercepted or
stolen. See <xref target="implicit_flow"/> for a deeper analysis of these attacks and the drawbacks
of using the Implicit flow in browsers, many of which are described by <xref target="oauth-security-topics"/>.</t>

<t>Instead, browser-based apps can perform the OAuth 2.0 authorization code flow
and make a POST request to the token endpoint to exchange an authorization code
for an access token, just like other OAuth clients. This ensures that access tokens
are not sent via the less secure front-channel, and are only returned over an HTTPS
connection initiated from the application. Combined with PKCE, this enables the
authorization server to ensure that authorization codes are useless even if
intercepted in transport.</t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth and OpenID Connect were initially created to allow third-party
applications to access an API on behalf of a user, they have both proven to be
useful in a first-party scenario as well. First-party apps are applications created
by the same organization that provides the API being accessed by the applicaiton.</t>

<t>For example, an web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use an OAuth Authorization Code flow as described later in this
document or use the OAuth Password grant.</t>

<t>It is strongly RECOMMENDED that applications use the Authorization Code flow over
the Password grant for several reasons. By redirecting to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single-sign-on sessions,
or use third-party identity providers. In contrast, the Password grant does not
provide any built-in mechanism for these, and must be extended with custom code.</t>

<section anchor="apps-served-from-the-same-domain-as-the-api" title="Apps Served from the Same Domain as the API">

<t>For simple system architectures, such as when the JavaScript application is served
from the same domain as the API (resource server) being accessed, it is likely a
better decision to avoid using OAuth entirely, and just use session authentication
to communicate with the API.</t>

<t>OAuth and OpenID Connect provide very little benefit in this deployment scenario,
so it is recommended to reconsider whether you need OAuth or OpenID Connect at all
in this case. Session authentication has the benefit of having fewer moving parts
and fewer attack vectors. OAuth and OpenID Connect were created primarily for
third-party or federated access to APIs, so may not be the best solution in a
same-domain scenario.</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Public browser-based apps needing user authorization create an authorization
request URI with the authorization code grant type per Section 4.1 of
OAuth 2.0 <xref target="RFC6749"/>, using a redirect URI capable of being received by the app.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Public browser-based apps MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension to OAuth, and authorization servers MUST support
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the same client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based apps MUST use the OAuth 2.0 "state" parameter to protect themselves
against Cross-Site Request Forgery and authorization code swap attacks and MUST use
a unique value for each authorization request.</t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers SHOULD require an exact match of a registered redirect URI.</t>

<t>If an authorization server wishes to provide some flexibility in redirect URI usage
to clients, it MAY require that only the hostname component of the redirect URI match
the hostname of the URL the application is served from.</t>

<t>Authorization servers MUST support one of the two redirect URI validation mechanisms
as described above.</t>

</section>
</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured. Even when the user has previously approved an
authorization request for a given client_id, the request SHOULD be
processed as if no previous request had been approved, unless the identity of
the client can be proven.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs without wildcard domains or paths, this exact match of registered
absolute HTTPS URIs MAY be accepted by authorization servers as proof of
identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Section 5.3.5 of <xref target="RFC6819"/> recommends using the "state" parameter to
link client requests and responses to prevent CSRF (Cross-Site Request Forgery)
attacks. To conform to this best practice, use of the "state" parameter is
REQUIRED, as described in <xref target="auth_code_request"/>.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>The security considerations around the authorization server mix-up that
are referenced in Section 8.10 of <xref target="RFC8252"/> also apply to browser-based apps.</t>

<t>Clients MUST use a unique redirect URI for each authorization server used by the
application. The client MUST store the redirect URI along with the session data
(e.g. along with "state") and MUST verify that the URI on which the authorization
response was received exactly matches.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the authorization code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing. If POSTs in particular from
unsupported single-page applications are to be rejected as errors per authorization
server security policy, such rejection is typically done based on the Origin
request header.</t>

</section>
<section anchor="csp" title="Content-Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Grant Authorization Flow">

<t>The OAuth 2.0 Implicit grant authorization flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by receiving an access token in the HTTP redirect
(front-channel) immediately without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token. Several attacks
on the implicit flow are described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
not all of which have sufficient mitigation strategies.</t>

<section anchor="threat-interception-of-the-redirect-uri" title="Threat: Interception of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
his control, he will directly get access to the fragment carrying the access token.
A method of performing this attack is described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser via various
means, including when the browser's HTTPS connection is being man-in-the-middled
by for example a corporate network. While this type of attack is typically out of
scope of basic security recommendations to prevent, in the case of browser-based
apps it is much easier to perform this kind of attack, where an injected script
can suddenly have access to everything on the page.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the authorization code with PKCE avoids these attacks.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that an access token was
issued to it, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Supporting the implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the authorization code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the authorization code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Performing OpenID Connect using the authorization code flow also provides
the additional benefit of the client not needing to verify the JWT signature, as the
token will have been fetched over an HTTPS connection directly from the authorization
server. However, returning an id_token using the Implicit flow requires the client
validate the JWT signature as malicious parties could otherwise craft and supply
fraudulent id_tokens.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to single-page apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. Now with the Session History API (described in
"Session history and navigation" of <xref target="HTML"/>), browsers have a mechanism to modify
the path component of the URL without triggering a page reload, so this overloaded
use of the fragment portion is no longer needed.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <author initials="A." surname="Barth" fullname="Adam Barth">
      <organization>Google, Inc</organization>
    </author>
    <author initials="D." surname="Veditz" fullname="Dan Veditz">
      <organization>Mozilla Corporation</organization>
    </author>
    <date year="2016" month="December"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2018" month="November"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author initials="." surname="whatwg" fullname="whatwg">
      <organization></organization>
    </author>
    <date year="2018"/>
  </front>
</reference>


    </references>


<section anchor="appendix-a-server-support-checklist" title="Appendix A: Server Support Checklist">

<t>OAuth servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching on redirect URIs or matching the hostname the application
is served from.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to acknowledge
Hannes Tschofenig as well as all the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIABdn81sAA6VcW5PbuJV+x69A9TzETkmK7WQmk05tVXra9kxPfOl1t9eV
pylIhFpIU6SWIFtWXP7v+51zABCkqI53dyoptygSPDjX71yg+XyuWteW9ly/
v+jajX6xeKbXdaN/auq9t838J+NtoS92O6+KelWZLe4sGrNu5zvT2NW9m9cG
z82X4f4l3T83uH/+7JkqTIv7Xzx7/uP8+fP5878o5XbNuW6bzrcvnj37y7MX
CquY8HJ1vz/XV1Vrm8q285f0FrUy7bm2n3dKrerCVXfnuvNz41fOqZ07V1q3
9epcH6zHn75u2sauffp82PYfFZFZN/TIHP/X2lX45mKhr2UffE32d2Gauhpc
rxu8+P19a/iT3RpXnmtDt/0tsGGxqrf8Zde4c71p250//8Mf+JbhHdnLXy70
J+Nam736pXlwRXaVX3yNfeurwlaQ1CGnoKC7/2bKe1O6ys59XXatqyvPr1JV
3WxN6x4s7fnD68sXz5//Jfz5w5//lP78MV398w9//CH8+eOL71/Qn5c31/wv
+CxacllDPlWrb+wKO20P+rou3Uqo6jmMbYYNvXX3Vn+yvuWrYeNvF/kl3uPP
dX1X2hnEvxo8f1GYrf7JNNCObAGILb/26AovTaX/yxau/Ve+Ang/uMhLvK3/
5crSYJPNrm4M8ZK/FjV+aVd2u7QN6fMPuP7atqvNgDl85YgVUbb7jWn3dzkR
2ZXeUvBRTMoHFs/beudWfvCm3liTIH4CR/Vl1zQknuvGrFq3siflcls3HoLU
b+qisPRnMZDQ7WLiG+YRbCnpelzs13pTwWOYorSHfJVfF6OrvMI/uqVb1UMp
V0VjD/qNWXYwfT8S9egyL/LarOyyru/Hona2JDG0I1lnl452Iax/Vz8k6f4I
P1Wtc/P55fbtm4EA6ML/W9JqPp9rs/QtSUupXqiyqPsXq6Bu7H93EK7X66be
avKtuumqirwC+YTGlge8RRsdnLCGw9FdZZalVW0Nh2nx3WXpgt02ttUFdAaP
txurd029st7PtHfVytKlg96YB6urWu/NAQ5W31u7wxKen4UjrtaOvZEpF/p2
47z2O7tya7cSegvbwj15Xj0qscZTHk+JVdF3ptVbhAG9BJHmHqroKrzKrFZ1
Bzr3G0sLPdgSyg9KB/GFeFCGt4Fw4/XeliX9uyS3sgvK7zmSbeq9bGoFR8Dk
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
hZO+euWzvudUlqaQCd33kCwaJvfcedgsphScJuvLmw+v9ZPT23uqQo620P++
ct/5BOOPSUMwjTM4s4mpl+OaxtfjKtONOKS37vP84w7/tO6u94+8gijcb1v3
udt9O+tvH5kNNQ1N653Gz3jVvNtxaOMGajZ0k/neHxfPnyWZhtlBngyjIM7F
gOOayyIGgyxNT8nxIEc6kSMHCru+4ZZjBhmrC5oi6Vhbh0LJYHVT1mSDMYuI
hV0kZUY9sYu7RX5HEPzTPhlJVY4QrmnJBDCOg05U0ziCIYU09ktgFHsm63ub
DFX4D1HTyQLrxp/E6azFVMZqT5aEqFoSBmxOgXnyo6XiYnHeqj+14EQZKTBj
2PdfkPc/qWlTo3PxST/RfZuFqQ4P2NIaEhcl7PD0xQFJPGB+nrHN8Omhjg/y
fDFjZv4IcL6qufReN4KqaSK9f/kszGv01BDqZv1e2qOm7xFXFyF7kkWS0yIe
0/NbU9hYFk150TdUDeldlaV3G1B++f7Djd7AvdN9T7IpuS9f+KQElSizXnwi
ky7y4AaZT191mpqyDm2oCGNl6phmRGW4+iicGSFqJ4dWYkgajYKE1If42Edv
7PyOU+uY1Qo0gKksNDWvZ2pT76lvOOvtLu6H2Qqvbrm9V+ufX93SQjyVEpSI
mkWJgKUFZVbRCCunGNUhJ/uvlOhwH+ugN6nJCMVbhco9dSCMK6Us7pHWyYhW
1sxyovOyXs9FkQRlAnh2oWEZRCKXFCh3dKuuNI0s1lVB5gSCpmfxfDZ/2VhC
6gLlbNPAXXAHYBL8prAg5AXgLyuEcld72IX8paBSg6h1Lcj0PQsq9SRE/9h7
ydGl+ejoUoAQp2MXQuIjbomF3RcOKWJYx7pGHnpesi9FhIIkNnGcDCa9a9yD
Ky2VvGHoO5sVNQPmdLDHTGRpPFLgZwCefSanqFLIq9HtnoeJzKnjWvrJly90
tIssUJqiNPrcV/sW+kJJn/3kCgSiSzzXBk1qQ0Vg2E5jK0yl+1wFRS9kV73w
SId4cJMTpjRl9jM3jobIhFtfJLvhhNu3FpcFghwPD4Ym1fH5i4EH61tXL062
rp7ScPS9Jx8sQVVseRiUQkGPEH6CAOrJYOrrKdLaLb5CkKfR25BWMJSmUJdC
IcS/W6SRYWqVhgyT36fC+7w+HmT8tyOLfZ8l9XhsI0WuOCvRzzI4sYTU45Hj
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
1f8AYLL75OxPAAA=

-->

</rfc>

