<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.12 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6749 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6749.xml">
<!ENTITY RFC6750 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6750.xml">
<!ENTITY RFC6819 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6819.xml">
<!ENTITY RFC7636 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7636.xml">
<!ENTITY RFC8252 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8252.xml">
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-oauth-browser-based-apps-08" category="bcp">

  <front>
    <title>OAuth 2.0 for Browser-Based Apps</title>

    <author initials="A." surname="Parecki" fullname="Aaron Parecki">
      <organization>Okta</organization>
      <address>
        <email>aaron@parecki.com</email>
        <uri>https://aaronparecki.com</uri>
      </address>
    </author>
    <author initials="D." surname="Waite" fullname="David Waite">
      <organization>Ping Identity</organization>
      <address>
        <email>david@alkaline-solutions.com</email>
      </address>
    </author>

    <date year="2021" month="May" day="17"/>

    <area>Security Area</area>
    <workgroup>Open Authentication Protocol</workgroup>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification details the security considerations and best practices that must be
taken into account when developing browser-based applications that use OAuth 2.0.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This specification describes the current best practices for implementing OAuth 2.0
authorization flows in applications executing in a browser.</t>

<t>For native application developers using OAuth 2.0 and OpenID Connect, an IETF BCP
(best current practice) was published that guides integration of these technologies.
This document is formally known as <xref target="RFC8252"/> or BCP 212, but nicknamed "AppAuth" after
the OpenID Foundation-sponsored set of libraries that assist developers in adopting
these practices. <xref target="RFC8252"/> makes specific recommendations for how to securely implement OAuth in native
applications, including incorporating additional OAuth extensions where needed.</t>

<t>OAuth 2.0 for Browser-Based Apps addresses the similarities between implementing
OAuth for native apps and browser-based apps, and includes additional
considerations when running in a browser. This is primarily focused on OAuth,
except where OpenID Connect provides additional considerations.</t>

<t>Many of these recommendations are derived from the OAuth 2.0 Security Best Current Practice
<xref target="oauth-security-topics"/> and browser-based apps are expected to follow those recommendations
as well. This draft expands on and further restricts various recommendations in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in <xref target="RFC2119"/>.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>In addition to the terms defined in referenced specifications, this document uses
the following terms:</t>

<t><list style="hanging">
  <t hangText='&quot;OAuth&quot;:'>
  In this document, "OAuth" refers to OAuth 2.0, <xref target="RFC6749"/> and <xref target="RFC6750"/>.</t>
  <t hangText='&quot;Browser-based application&quot;:'>
  An application that is dynamically downloaded and executed in a web browser,
usually written in JavaScript. Also sometimes referred to as a "single-page application", or "SPA".</t>
</list></t>

</section>
<section anchor="overview" title="Overview">

<t>At the time that OAuth 2.0 <xref target="RFC6749"/> and <xref target="RFC6750"/> were created, browser-based JavaScript applications needed a solution that strictly complied with the same-origin policy. Common deployments of OAuth 2.0 involved an application running on a different domain than the authorization server, so it was historically not possible to use the Authorization Code flow which would require a cross-origin POST request. This was one of the motivations for the definition of the Implicit flow, which returns the access token in the front channel via the fragment part of the URL, bypassing the need for a cross-origin POST request.</t>

<t>However, there are several drawbacks to the Implicit flow, generally involving vulnerabilities associated with the exposure of the access token in the URL. See <xref target="implicit_flow"/> for an analysis of these attacks and the drawbacks of using the Implicit flow in browsers. Additional attacks and security considerations can be found in <xref target="oauth-security-topics"/>.</t>

<t>In recent years, widespread adoption of Cross-Origin Resource Sharing (CORS), which enables exceptions to the same-origin policy, allows browser-based apps to use the OAuth 2.0 Authorization Code flow and make a POST request to exchange the authorization code for an access token at the token endpoint. In this flow, the access token is never exposed in the less secure front channel. Furthermore, adding PKCE to the flow ensures that even if an authorization code is intercepted, it is unusable by an attacker.</t>

<t>For this reason, and from other lessons learned, the current best practice for browser-based applications is to use the OAuth 2.0 Authorization Code flow with PKCE.</t>

<t>Browser-based applications:</t>

<t><list style="symbols">
  <t>MUST use the OAuth 2.0 Authorization Code flow with the PKCE extension when obtaining an access token</t>
  <t>MUST Protect themselves against CSRF attacks by either:
  <list style="symbols">
      <t>ensuring the authorization server supports PKCE, or</t>
      <t>by using the OAuth 2.0 "state" parameter or the OpenID Connect "nonce" parameter to carry one-time use CSRF tokens</t>
    </list></t>
  <t>MUST Register one or more redirect URIs, and use only exact registered redirect URIs in authorization requests</t>
</list></t>

<t>OAuth 2.0 authorization servers supporting browser-based applications:</t>

<t><list style="symbols">
  <t>MUST Require exact matching of registered redirect URIs</t>
  <t>MUST Support the PKCE extension</t>
  <t>MUST NOT issue access tokens in the authorization response</t>
  <t>If issuing refresh tokens to browser-based applications, then:
  <list style="symbols">
      <t>MUST rotate refresh tokens on each use or use sender-constrained refresh tokens, and</t>
      <t>MUST set a maximum lifetime on refresh tokens or expire if they are not used in some amount of time</t>
    </list></t>
</list></t>

</section>
<section anchor="first-party-applications" title="First-Party Applications">

<t>While OAuth was initially created to allow third-party
applications to access an API on behalf of a user, it has proven to be
useful in a first-party scenario as well. First-party apps are applications where
the same organization provides both the API and the application.</t>

<t>Examples of first-party applications are a web email client provided by the operator of the email account,
or a mobile banking application created by bank itself. (Note that there is no
requirement that the application actually be developed by the same company; a mobile
banking application developed by a contractor that is branded as the bank's
application is still considered a first-party application.) The first-party app
consideration is about the user's relationship to the application and the service.</t>

<t>To conform to this best practice, first-party applications using OAuth or OpenID
Connect MUST use a redirect-based flow (such as the OAuth Authorization Code flow)
as described later in this document.</t>

<t>The resource owner password credentials grant MUST NOT be used, as described in
<xref target="oauth-security-topics"/> Section 2.4. Instead, by using the Authorization Code flow
and redirecting the user to the authorization server,
this provides the authorization server the opportunity to prompt the user for
multi-factor authentication options, take advantage of single sign-on sessions,
or use third-party identity providers. In contrast, the resource owner password credentials grant does not
provide any built-in mechanism for these, and would instead be extended with custom code.</t>

</section>
<section anchor="application-architecture-patterns" title="Application Architecture Patterns">

<t>There are three primary architectural patterns available when building browser-based
applications.</t>

<t><list style="symbols">
  <t>a JavaScript application that has methods of sharing data with resource servers, such as using common-domain cookies</t>
  <t>a JavaScript application with a backend</t>
  <t>a JavaScript application with no backend, accessing resource servers directly</t>
</list></t>

<t>These three architectures have different use cases and considerations.</t>

<section anchor="browser-based-apps-that-can-share-data-with-the-resource-server" title="Browser-Based Apps that Can Share Data with the Resource Server">

<t>For simple system architectures, such as when the JavaScript application is served
from a domain that can share cookies with the domain of the API (resource server),
OAuth adds additional attack vectors that could be avoided with a different solution.</t>

<t>In particular, using any redirect-based mechanism of obtaining an access token
enables the redirect-based attacks described in <xref target="oauth-security-topics"/> Section 4, but if
the application, authorization server and resource server share a domain, then it is
unnecessary to use a redirect mechanism to communicate between them.</t>

<t>An additional concern with handling access tokens in a browser is that as of the date of this publication, there is no
secure storage mechanism where JavaScript code can keep the access token to be later
used in an API request. Using an OAuth flow results in the JavaScript code getting an
access token, needing to store it somewhere, and then retrieve it to make an API request.</t>

<t>Instead, a more secure design is to use an HTTP-only cookie between the JavaScript application
and API so that the JavaScript code can't access the cookie value itself. The Secure cookie attribute should be used to ensure the cookie is not included in unencrypted HTTP requests. Additionally, the SameSite cookie attribute can be used to prevent CSRF attacks, or alternatively, the application
and API could be written to use anti-CSRF tokens.</t>

<t>OAuth was originally created for third-party or federated access to APIs, so it may not be
the best solution in a common-domain deployment. That said, using OAuth even in a common-domain
architecture does mean you can more easily rearchitect things later, such as if you were
to later add a new domain to the system.</t>

</section>
<section anchor="javascript-applications-with-a-backend" title="JavaScript Applications with a Backend">

<figure><artwork><![CDATA[
+-------------+  +--------------+ +---------------+
|             |  |              | |               |
|Authorization|  |    Token     | |   Resource    |
|  Endpoint   |  |   Endpoint   | |    Server     |
|             |  |              | |               |
+-------------+  +--------------+ +---------------+

       ^                ^                   ^
       |             (D)|                (G)|
       |                v                   v
       |
       |         +--------------------------------+
       |         |                                |
       |         |          Application           |
    (B)|         |            Server              |
       |         |                                |
       |         +--------------------------------+
       |
       |           ^     ^     +          ^    +
       |        (A)|  (C)|  (E)|       (F)|    |(H)
       v           v     +     v          +    v

+-------------------------------------------------+
|                                                 |
|                   Browser                       |
|                                                 |
+-------------------------------------------------+
]]></artwork></figure>

<t>In this architecture, commonly referred to as "backend for frontend" or "BFF", the JavaScript code is loaded from a dynamic Application Server (A) that also has the ability to execute code itself. This enables the ability to keep
all of the steps involved in obtaining an access token outside of the JavaScript
application.</t>

<t>In this case, the Application Server initiates the OAuth flow itself, by redirecting the browser to the authorization endpoint (B). When the user is redirected back, the browser delivers the authorization code to the application server (C), where it can then exchange it for an access token at the token endpoint (D) using its client secret. The application server then keeps the access token and refresh token stored internally, and creates a separate session with the browser-based app via a
traditional browser cookie (E).</t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it instead makes the request to the Application Server (F), and the Application Server will
make the request with the access token to the Resource Server (G), and forward the response (H)
back to the browser.</t>

<t>(Common examples of this architecture are an Angular front-end with a .NET backend, or
a React front-end with a Spring Boot backend.)</t>

<t>The Application Server SHOULD be considered a confidential client, and issued its own client secret. The Application Server SHOULD use the OAuth 2.0 Authorization Code grant with PKCE to initiate a request for an access token. Detailed recommendations for confidential clients can be found in <xref target="oauth-security-topics"/> Section 2.1.1.</t>

<t>In this scenario, the session between the browser and Application Server SHOULD be a
session cookie provided by the Application Server.</t>

<t>Security of the connection between code running in the browser and this Application Server is
assumed to utilize browser-level protection mechanisms. Details are out of scope of
this document, but many recommendations can be found in the OWASP Cheat Sheet series (https://cheatsheetseries.owasp.org/),
such as setting an HTTP-only and Secure cookie to authenticate the session between the
browser and Application Server.</t>

<!--
TODO: security considerations around things like Server Side Request Forgery or logging the cookies

TODO: Add another description of the alternative architecture where access tokens are passed to JS and the JS app makes API calls directly. https://mailarchive.ietf.org/arch/msg/oauth/sl-g6zYSpJW3sYqrR0peadUw54U/
-->

</section>
<section anchor="javascript-applications-without-a-backend" title="JavaScript Applications without a Backend">

<figure><artwork><![CDATA[
                      +---------------+           +--------------+
                      |               |           |              |
                      | Authorization |           |   Resource   |
                      |    Server     |           |    Server    |
                      |               |           |              |
                      +---------------+           +--------------+

                             ^     ^                 ^     +
                             |     |                 |     |
                             |(B)  |(C)              |(D)  |(E)
                             |     |                 |     |
                             |     |                 |     |
                             +     v                 +     v

+-----------------+         +-------------------------------+
|                 |   (A)   |                               |
| Static Web Host | +-----> |           Browser             |
|                 |         |                               |
+-----------------+         +-------------------------------+
]]></artwork></figure>

<t>In this architecture, the JavaScript code is first loaded from a static web host into
the browser (A), and the application then runs in the browser. This application is considered a public
client, since there is no way to issue it a client secret and there is no other secure
client authentication mechanism available in the browser.</t>

<t>The code in the browser initiates the Authorization Code flow with the PKCE
extension (described in <xref target="authorization_code_flow"/>) (B) above, and obtains an
access token via a POST request (C). The JavaScript application is then responsible for storing
the access token (and optional refresh token) as securely as possible using appropriate browser APIs.
As of the date of this publication there is no browser API that allows to store tokens in a completely
secure way.
<!--
TODO: Add sentence referencing the section about service worker pattern in a future draft?
--></t>

<t>When the JavaScript application in the browser wants to make a request to the Resource Server,
it can interact with the Resource Server directly. It includes the access token in the request (D)
and receives the Resource Server's response (E).</t>

<t>In this scenario, the Authorization Server and Resource Server MUST support
the necessary CORS headers to enable the JavaScript code to make this POST request
from the domain on which the script is executing. (See <xref target="cors"/> for additional details.)</t>

</section>
</section>
<section anchor="authorization_code_flow" title="Authorization Code Flow">

<t>Browser-based applications that are public clients and use the Authorization Code grant type described in
Section 4.1 of OAuth 2.0 <xref target="RFC6749"/> MUST also follow these additional requirements
described in this section.</t>

<section anchor="auth_code_request" title="Initiating the Authorization Request from a Browser-Based Application">

<t>Browser-based applications that are public clients MUST implement the Proof Key for Code Exchange
(PKCE <xref target="RFC7636"/>) extension when obtaining an access token, and authorization servers MUST support and enforce
PKCE for such clients.</t>

<t>The PKCE extension prevents an attack where the authorization code is intercepted
and exchanged for an access token by a malicious client, by providing the
authorization server with a way to verify the client instance that exchanges
the authorization code is the same one that initiated the flow.</t>

<t>Browser-based applications MUST prevent CSRF attacks against their redirect URI. This can be
accomplished by any of the below:</t>

<t><list style="symbols">
  <t>using PKCE, and confirming that the authorization server supports PKCE</t>
  <t>using a unique value for the OAuth 2.0 "state" parameter</t>
  <t>if the application is using OpenID Connect, by using the OpenID Connect "nonce" parameter</t>
</list></t>

</section>
<section anchor="auth_code_redirect" title="Handling the Authorization Code Redirect">

<t>Authorization servers MUST require an exact match of a registered redirect URI.
As described in <xref target="oauth-security-topics"/> Section 4.1.1. this helps to prevent attacks targeting the authorization code.</t>

</section>
</section>
<section anchor="refresh_tokens" title="Refresh Tokens">

<t>Refresh tokens provide a way for applications to obtain a new access token when the
initial access token expires. With public clients, the risk of a leaked refresh token
is greater than leaked access tokens, since an attacker may be able to
continue using the stolen refresh token to obtain new access tokens potentially without being
detectable by the authorization server.</t>

<t>Browser-based applications provide an attacker with several opportunities by which a
refresh token can be leaked, just as with access tokens. As such, these applications
are considered a higher risk for handling refresh tokens.</t>

<t>Authorization servers may choose whether or not to issue refresh tokens to browser-based
applications. <xref target="oauth-security-topics"/> describes some additional requirements around refresh tokens
on top of the recommendations of <xref target="RFC6749"/>. Applications and authorization servers
conforming to this BCP MUST also follow the recommendations in <xref target="oauth-security-topics"/>
around refresh tokens if refresh tokens are issued to browser-based applications.</t>

<t>In particular, authorization servers:</t>

<t><list style="symbols">
  <t>MUST either rotate refresh tokens on each use OR use sender-constrained refresh tokens as described in <xref target="oauth-security-topics"/> Section 4.13.2</t>
  <t>MUST either set a maximum lifetime on refresh tokens OR expire if the refresh token has not been used within some amount of time</t>
  <t>MUST NOT extend the lifetime of the new refresh token beyond the lifetime of the initial refresh token</t>
  <t>upon issuing a rotated refresh token, MUST NOT extend the lifetime of the new refresh token beyond the lifetime of the initial refresh token if the refresh token has a preestablished expiration time</t>
</list></t>

<t>For example:</t>

<t><list style="symbols">
  <t>A user authorizes an application, issuing an access token that lasts 1 hour, and a refresh token that lasts 24 hours</t>
  <t>After 1 hour, the initial access token expires, so the application uses the refresh token to get a new access token</t>
  <t>The authorization server returns a new access token that lasts 1 hour, and a new refresh token that lasts 23 hours</t>
  <t>This continues until 24 hours pass from the initial authorization</t>
  <t>At this point, when the application attempts to use the refresh token after 24 hours, the request will fail and the application will have to involve the user in a new authorization request</t>
</list></t>

<t>By limiting the overall refresh token lifetime to the lifetime of the initial refresh token, this ensures a stolen refresh token cannot be used indefinitely.</t>

<t>Authorization servers MAY set different policies around refresh token issuance, lifetime and expiration for browser-based applications compared to other public clients.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<section anchor="client_registration" title="Registration of Browser-Based Apps">

<t>Browser-based applications are considered public clients as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>, and MUST be registered with the authorization server as
such. Authorization servers MUST record the client type in the client registration
details in order to identify and process requests accordingly.</t>

<t>Authorization servers MUST require that browser-based applications register
one or more redirect URIs.</t>

</section>
<section anchor="client_authentication" title="Client Authentication">

<t>Since a browser-based application's source code is delivered to the end-user's
browser, it cannot contain provisioned secrets. As such, a browser-based app
with native OAuth support is considered a public client as defined by Section 2.1
of OAuth 2.0 <xref target="RFC6749"/>.</t>

<t>Secrets that are statically included as part of an app distributed to
multiple users should not be treated as confidential secrets, as one
user may inspect their copy and learn the shared secret.  For this
reason, and those stated in Section 5.3.1 of <xref target="RFC6819"/>, it is NOT RECOMMENDED
for authorization servers to require client authentication of browser-based
applications using a shared secret, as this serves little value beyond
client identification which is already provided by the client_id request parameter.</t>

<t>Authorization servers that still require a statically included shared
secret for SPA clients MUST treat the client as a public
client, and not accept the secret as proof of the client's identity. Without
additional measures, such clients are subject to client impersonation
(see <xref target="client_impersonation"/> below).</t>

</section>
<section anchor="client_impersonation" title="Client Impersonation">

<t>As stated in Section 10.2 of OAuth 2.0 <xref target="RFC6749"/>, the authorization
server SHOULD NOT process authorization requests automatically
without user consent or interaction, except when the identity of the
client can be assured.</t>

<t>If authorization servers restrict redirect URIs to a fixed set of absolute
HTTPS URIs, preventing the use of wildcard domains, wildcard paths, or wildcard query string components,
this exact match of registered absolute HTTPS URIs MAY be accepted by authorization servers as
proof of identity of the client for the purpose of deciding whether to automatically
process an authorization request when a previous request for the client_id
has already been approved.</t>

</section>
<section anchor="csrf_protection" title="Cross-Site Request Forgery Protections">

<t>Clients MUST prevent Cross-Site Request Forgery (CSRF) attacks against their redirect URI.
Clients can accomplish this by either ensuring the authorization server supports
PKCE and relying on the CSRF protection that PKCE provides, or if the client is also an
OpenID Connect client, using the OpenID Connect "nonce" parameter, or by using the
"state" parameter to carry one-time-use CSRF tokens as described in <xref target="auth_code_request"/>.</t>

<t>See Section 2.1 of <xref target="oauth-security-topics"/> for additional details.</t>

</section>
<section anchor="auth_server_mixup" title="Authorization Server Mix-Up Mitigation">

<t>Authorization server mix-up attacks mark a severe threat to every client that supports
at least two authorization servers. To conform to this BCP such clients MUST apply
countermeasures to defend against mix-up attacks.</t>

<t>It is RECOMMENDED to defend against mix-up attacks by identifying and validating the issuer
of the authorization response. This can be achieved either by using the "iss" response
parameter, as defined in <xref target="oauth-iss-auth-resp"/>, or by using the "iss" Claim of the ID token
when OpenID Connect is used.</t>

<t>Alternative countermeasures, such as using distinct redirect URIs for each issuer, SHOULD
only be used if identifying the issuer as described is not possible.</t>

<t>Section 4.4 of <xref target="oauth-security-topics"/> provides additional details about mix-up attacks
and the countermeasures mentioned above.</t>

</section>
<section anchor="cors" title="Cross-Domain Requests">

<t>To complete the Authorization Code flow, the browser-based application will
need to exchange the authorization code for an access token at the token endpoint.
If the authorization server provides additional endpoints to the application, such
as metadata URLs, dynamic client registration, revocation, introspection, discovery or
user info endpoints, these endpoints may also be accessed by the browser-based app.
Since these requests will be made from a browser, authorization servers MUST support
the necessary CORS headers (defined in <xref target="Fetch"/>) to allow the browser to make the
request.</t>

<t>This specification does not include guidelines for deciding whether a CORS policy
for the token endpoint should be a wildcard origin or more restrictive. Note,
however, that the browser will attempt to GET or POST to the API endpoint before
knowing any CORS policy; it simply hides the succeeding or failing result from
JavaScript if the policy does not allow sharing.</t>

</section>
<section anchor="csp" title="Content Security Policy">

<t>A browser-based application that wishes to use either long-lived refresh tokens or
privileged scopes SHOULD restrict its JavaScript execution to a set of statically
hosted scripts via a Content Security Policy (<xref target="CSP2"/>) or similar mechanism. A
strong Content Security Policy can limit the potential attack vectors for malicious
JavaScript to be executed on the page.</t>

</section>
<section anchor="implicit_flow" title="OAuth Implicit Flow">

<t>The OAuth 2.0 Implicit flow (defined in Section 4.2 of
OAuth 2.0 <xref target="RFC6749"/>) works by the authorization server issuing an access token in the
authorization response (front channel) without the code exchange step. In this case, the access
token is returned in the fragment part of the redirect URI, providing an attacker
with several opportunities to intercept and steal the access token.</t>

<t>Authorization servers MUST NOT issue access tokens in the authorization response, and MUST issue
access tokens only from the token endpoint.</t>

<section anchor="attacks-on-the-implicit-flow" title="Attacks on the Implicit Flow">

<t>Many attacks on the Implicit flow described by <xref target="RFC6819"/> and Section 4.1.2 of <xref target="oauth-security-topics"/>
do not have sufficient mitigation strategies. The following sections describe the specific
attacks that cannot be mitigated while continuing to use the Implicit flow.</t>

<section anchor="threat-manipulation-of-the-redirect-uri" title="Threat: Manipulation of the Redirect URI">

<t>If an attacker is able to cause the authorization response to be sent to a URI under
their control, they will directly get access to the authorization response including the access token.
Several methods of performing this attack are described in detail in <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-access-token-leak-in-browser-history" title="Threat: Access Token Leak in Browser History">

<t>An attacker could obtain the access token from the browser's history.
The countermeasures recommended by <xref target="RFC6819"/> are limited to using short expiration
times for tokens, and indicating that browsers should not cache the response.
Neither of these fully prevent this attack, they only reduce the potential damage.</t>

<t>Additionally, many browsers now also sync browser history to cloud services and to
multiple devices, providing an even wider attack surface to extract access tokens
out of the URL.</t>

<t>This is discussed in more detail in Section 4.3.2 of <xref target="oauth-security-topics"/>.</t>

</section>
<section anchor="threat-manipulation-of-scripts" title="Threat: Manipulation of Scripts">

<t>An attacker could modify the page or inject scripts into the browser through various
means, including when the browser's HTTPS connection is being intercepted by, for
example, a corporate network. While man-in-the-middle attacks are typically out of scope
of basic security recommendations to prevent, in the case of browser-based apps they are
much easier to perform. An injected script can enable an attacker to have access to everything
on the page.</t>

<t>The risk of a malicious script running on the page may be amplified when the application
uses a known standard way of obtaining access tokens, namely that the attacker can
always look at the <spanx style="verb">window.location</spanx> variable to find an access token. This threat profile
is different from an attacker specifically targeting an individual application
by knowing where or how an access token obtained via the Authorization Code flow may
end up being stored.</t>

</section>
<section anchor="threat-access-token-leak-to-third-party-scripts" title="Threat: Access Token Leak to Third-Party Scripts">

<t>It is relatively common to use third-party scripts in browser-based apps, such as
analytics tools, crash reporting, and even things like a Facebook or Twitter "like" button.
In these situations, the author of the application may not be able to be fully aware
of the entirety of the code running in the application. When an access token is
returned in the fragment, it is visible to any third-party scripts on the page.</t>

</section>
</section>
<section anchor="countermeasures" title="Countermeasures">

<t>In addition to the countermeasures described by <xref target="RFC6819"/> and <xref target="oauth-security-topics"/>,
using the Authorization Code flow with PKCE extension prevents the attacks described above by
avoiding returning the access token in the redirect response at all.</t>

<t>When PKCE is used, if an authorization code is stolen in transport, the attacker is
unable to do anything with the authorization code.</t>

</section>
<section anchor="disadvantages-of-the-implicit-flow" title="Disadvantages of the Implicit Flow">

<t>There are several additional reasons the Implicit flow is disadvantageous compared to
using the standard Authorization Code flow.</t>

<t><list style="symbols">
  <t>OAuth 2.0 provides no mechanism for a client to verify that a particular access token was
intended for that client, which could lead to misuse and possible impersonation attacks if
a malicious party hands off an access token it retrieved through some other means
to the client.</t>
  <t>Returning an access token in the front-channel redirect gives the authorization
server no assurance that the access token will actually end up at the
application, since there are many ways this redirect may fail or be intercepted.</t>
  <t>Supporting the Implicit flow requires additional code, more upkeep and
understanding of the related security considerations, while limiting the
authorization server to just the Authorization Code flow reduces the attack surface
of the implementation.</t>
  <t>If the JavaScript application gets wrapped into a native app, then <xref target="RFC8252"/>
also requires the use of the Authorization Code flow with PKCE anyway.</t>
</list></t>

<t>In OpenID Connect, the id_token is sent in a known format (as a JWT), and digitally
signed. Returning an id_token using the Implicit flow (<spanx style="verb">response_type=id_token</spanx>) requires the client
validate the JWT signature, as malicious parties could otherwise craft and supply
fraudulent id_tokens. Performing OpenID Connect using the Authorization Code flow provides
the benefit of the client not needing to verify the JWT signature, as the ID token will
have been fetched over an HTTPS connection directly from the authorization server. Additionally,
in many cases an application will request both an ID token and an access token, so it is
simplier and provides fewer attack vectors to obtain both via the Authorization Code flow.</t>

</section>
<section anchor="historic-note" title="Historic Note">

<t>Historically, the Implicit flow provided an advantage to browser-based apps since
JavaScript could always arbitrarily read and manipulate the fragment portion of the
URL without triggering a page reload. This was necessary in order to remove the
access token from the URL after it was obtained by the app.</t>

<t>Modern browsers now have the Session History API (described in "Session history and
navigation" of <xref target="HTML"/>), which provides a mechanism to modify the path and query string
component of the URL without triggering a page reload. This means modern browser-based apps can
use the unmodified OAuth 2.0 Authorization Code flow, since they have the ability to
remove the authorization code from the query string without triggering a page reload
thanks to the Session History API.</t>

</section>
</section>
<section anchor="additional-security-considerations" title="Additional Security Considerations">

<t>The OWASP Foundation (https://www.owasp.org/) maintains a set of security
recommendations and best practices for web applications, and it is RECOMMENDED
to follow these best practices when creating an OAuth 2.0 Browser-Based application.</t>

</section>
</section>
<section anchor="iana" title="IANA Considerations">

<t>This document does not require any IANA actions.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC2119;
&RFC6749;
&RFC6750;
&RFC6819;
&RFC7636;
&RFC8252;
<reference anchor="CSP2" >
  <front>
    <title>Content Security Policy</title>
    <author initials="M." surname="West" fullname="Mike West">
      <organization>Google, Inc</organization>
    </author>
    <date year="2018" month="October"/>
  </front>
</reference>
<reference anchor="Fetch" >
  <front>
    <title>Fetch</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2018"/>
  </front>
</reference>
<reference anchor="oauth-security-topics" >
  <front>
    <title>OAuth 2.0 Security Best Current Practice</title>
    <author initials="T." surname="Lodderstedt" fullname="Torsten Lodderstedt">
      <organization>yes.com</organization>
    </author>
    <author initials="J." surname="Bradley" fullname="John Bradley">
      <organization>Yubico</organization>
    </author>
    <author initials="A." surname="Labunets" fullname="Andrey Labunets">
      <organization>Facebook</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2021" month="April"/>
  </front>
</reference>
<reference anchor="oauth-iss-auth-resp" >
  <front>
    <title>OAuth 2.0 Authorization Server Issuer Identifier in Authorization Response</title>
    <author initials="K." surname="Meyer zu Selhausen" fullname="Karsten Meyer zu Selhausen">
      <organization>Hackmanit</organization>
    </author>
    <author initials="D." surname="Fett" fullname="Daniel Fett">
      <organization>yes.com</organization>
    </author>
    <date year="2021" month="January"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>

<reference anchor="HTML" >
  <front>
    <title>HTML</title>
    <author>
      <organization>whatwg</organization>
    </author>
    <date year="2020"/>
  </front>
</reference>


    </references>


<section anchor="server-support-checklist" title="Server Support Checklist">

<t>OAuth authorization servers that support browser-based apps MUST:</t>

<t><list style="numbers">
  <t>Require "https" scheme redirect URIs.</t>
  <t>Require exact matching of registered redirect URIs.</t>
  <t>Support PKCE <xref target="RFC7636"/>. Required to protect authorization code
grants sent to public clients. See <xref target="auth_code_request"/></t>
  <t>Support cross-domain requests at the token endpoint in order to allow browsers
to make the authorization code exchange request. See <xref target="cors"/></t>
  <t>Not assume that browser-based clients can keep a secret, and SHOULD NOT issue
secrets to applications of this type.</t>
  <t>Not support the Resource Owner Password grant for browser-based clients.</t>
  <t>Follow the <xref target="oauth-security-topics"/> recommendations on refresh tokens, as well
as the additional requirements described in <xref target="refresh_tokens"/>.</t>
</list></t>

</section>
<section anchor="document-history" title="Document History">

<t>[[ To be removed from the final specification ]]</t>

<t>-08</t>

<t><list style="symbols">
  <t>Added a note to use the "Secure" cookie attribute in addition to SameSite etc</t>
  <t>Updates to bring this draft in sync with the latest Security BCP</t>
  <t>Updated text for mix-up countermeasures to reference the new "iss" extension</t>
  <t>Changed "SHOULD" for refresh token rotation to MUST either use rotation or sender-constraining to match the Security BCP</t>
  <t>Fixed references to other specs and extensions</t>
  <t>Editorial improvements in descriptions of the different architectures</t>
</list></t>

<t>-07</t>

<t><list style="symbols">
  <t>Clarify PKCE requirements apply only to issuing access tokens</t>
  <t>Change "MUST" to "SHOULD" for refresh token rotation</t>
  <t>Editorial clarifications</t>
</list></t>

<t>-06</t>

<t><list style="symbols">
  <t>Added refresh token requirements to AS summary</t>
  <t>Editorial clarifications</t>
</list></t>

<t>-05</t>

<t><list style="symbols">
  <t>Incorporated editorial and substantive feedback from Mike Jones</t>
  <t>Added references to "nonce" as another way to prevent CSRF attacks</t>
  <t>Updated headers in the Implicit Flow section to better represent the relationship between the paragraphs</t>
</list></t>

<t>-04</t>

<t><list style="symbols">
  <t>Disallow the use of the Password Grant</t>
  <t>Add PKCE support to summary list for authorization server requirements</t>
  <t>Rewrote refresh token section to allow refresh tokens if they are time-limited, rotated on each use, and requiring that the rotated refresh token lifetimes do not extend past the lifetime of the initial refresh token, and to bring it in line with the Security BCP</t>
  <t>Updated recommendations on using state to reflect the Security BCP</t>
  <t>Updated server support checklist to reflect latest changes</t>
  <t>Updated the same-domain JS architecture section to emphasize the architecture rather than domain</t>
  <t>Editorial clarifications in the section that talks about OpenID Connect ID tokens</t>
</list></t>

<t>-03</t>

<t><list style="symbols">
  <t>Updated the historic note about the fragment URL clarifying that the Session History API means browsers can use the unmodified authorization code flow</t>
  <t>Rephrased "Authorization Code Flow" intro paragraph to better lead into the next two sections</t>
  <t>Softened "is likely a better decision to avoid using OAuth entirely" to "it may be&#8230;" for common-domain deployments</t>
  <t>Updated abstract to not be limited to public clients, since the later sections talk about confidential clients</t>
  <t>Removed references to avoiding OpenID Connect for same-domain architectures</t>
  <t>Updated headers to better describe architectures (Apps Served from a Static Web Server -&gt; JavaScript Applications without a Backend)</t>
  <t>Expanded "same-domain architecture" section to better explain the problems that OAuth has in this scenario</t>
  <t>Referenced Security BCP in implicit flow attacks where possible</t>
  <t>Minor typo corrections</t>
</list></t>

<t>-02</t>

<t><list style="symbols">
  <t>Rewrote overview section incorporating feedback from Leo Tohill</t>
  <t>Updated summary recommendation bullet points to split out application and server requirements</t>
  <t>Removed the allowance on hostname-only redirect URI matching, now requiring exact redirect URI matching</t>
  <t>Updated Section 6.2 to drop reference of SPA with a backend component being a public client</t>
  <t>Expanded the architecture section to explicitly mention three architectural patterns available to JS apps</t>
</list></t>

<t>-01</t>

<t><list style="symbols">
  <t>Incorporated feedback from Torsten Lodderstedt</t>
  <t>Updated abstract</t>
  <t>Clarified the definition of browser-based apps to not exclude applications cached in the browser, e.g. via Service Workers</t>
  <t>Clarified use of the state parameter for CSRF protection</t>
  <t>Added background information about the original reason the implicit flow was created due to lack of CORS support</t>
  <t>Clarified the same-domain use case where the SPA and API share a cookie domain</t>
  <t>Moved historic note about the fragment URL into the Overview</t>
</list></t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors would like to acknowledge the work of William Denniss and John Bradley,
whose recommendation for native apps informed many of the best practices for
browser-based applications. The authors would also like to thank Hannes Tschofenig
and Torsten Lodderstedt, the attendees of the Internet Identity Workshop 27
session at which this BCP was originally proposed, and the following individuals
who contributed ideas, feedback, and wording that shaped and formed the final specification:</t>

<t>Annabelle Backman, Brian Campbell, Brock Allen, Christian Mainka, Daniel Fett,
George Fletcher, Hannes Tschofenig, Janak Amarasena, John Bradley, Joseph Heenan,
Justin Richer, Karl McGuinness, Karsten Meyer zu Selhausen, Leo Tohill, Mike Jones,
Tomek Stojecki, Torsten Lodderstedt, and Vittorio Bertocci.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIACYao2AAA719a3fbxnbo9/kVuMqHSCckbct51b3n3MqSHcuxY1WS65XV
1eYMgaGIIxBg8RDNOPnv3a95gQAlJ71Ve2ISBAYze/b7NdPpVLV5W5hnybuT
rl0mx7PHyaKqk+d1tWlMPX2uG5MlJ+t1o7IqLfUK7sxqvWinuWkX00rDQ9O5
3DzHm6cabp4+/l5luoWbjx8fP5k+/mb65Dul8nX9LGnrrmmPHz/+p8fHStdG
y5vV7eZZcl62pi5NOz3DV6hUt8+SebpWKq2yvLx5lnTNVDdpnqt1/kwlSVul
z5KtaeBjU9VtbRaN+75d+a8Kp1nV+MgU/pckeQm/nMySC5hBepvTNV7cia6r
Mrpe1fDid7etpm9mpfPiWaLxtn9Z822ztFrRj12dP0uWbbtunj16RLfEdwQv
P5slH3TemuDVZ/ouz4Kr9OILWHdynpkStmkbziDDu/9FF7e6yEszbaqia/Oq
bOhVqqzqlW7zO4Nrvnx5evzkyT/Jx2+/+9p//Oax/fi9u+G7b59+Kx+/P/7m
GD+eXl3QvwByxpbTCraqbJMrk8Ki221yURV5yhP0wIYVy9re5rcm+WCalq4K
DN7Owku03B+q6qYwE8CElC4zEr1L22puakCmJ98LoAsP6M1mM9s8ncHzj64v
H8FUnz6Cm16aNl1Gc6YrOzO00N8sdbu5CacXXLG4PPT6BQ47a9YmnfETNBO4
j4mjEQhN22qdp000I09zDo7PASDJaVfXCN2LWqdtnppRsF5XdQP7kLypsszg
xywC8PVs4BeCM1CFw1o72OtqWQLh66ww23CU17PeVRrh526ep1U0wEmZ1Wab
vNHzDoi4CccAWutdpkFe6tTMq+o2GuZMl7kpcLuixQDFBJd2VsFbdLKu84KY
zu5GtVVVNDPkW7RDy3ZVPNrhZb3tctuYN8B68ENtmvXIJp7QDuW/aiRE2NL6
DnD2vGk6/IdIeJHDx7zs3XkJQwLljm/zj5q3+a3ZwvO/djB2sdRdY8oQQD/O
xm8gcL3S6e0KgNv+j4H7tS47XW//DMAjwKq8XISc69X12zcRsPHCnyPh48e7
E8WZ7VKwmk6niZ43LVKhUtfLvEnwJtjFlDcuMy3w4iZplyaxiJOksJU50Bzd
0iS6zJI5EvVaiBlv122yAjEIP6hW38LO5mVbJTpNqw7IfrM0OPadKQAHgf1H
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
uanbKk1z6+ZcFN1iof4bnSwBwXWYAAA=

-->

</rfc>

